[["index.html", "Naslund Chapter 1 Analysis Chapter 1 Sampling scheme 1.1 Dissolved oxygen 1.2 Temperature 1.3 PAR 1.4 Dissolved gas concentrations 1.5 Wind Speed 1.6 Residence time calculation", " Naslund Chapter 1 Analysis Laura Naslund 2023-04-14 Chapter 1 Sampling scheme We sampled 4 sites over at least one 24 hr period. We installed 25 ebullition traps across 5 transects in each impoundment. Every 3 hours, we recorded the volume of gas accumulated in each ebullition trap and took a diffusive flux measurement immediately adjacent to 10 if the ebullition traps across the impoundment. To determine impoundment area, I digitized the impoundments using high resolution (0.5 ft) orthoimagery captured during the leaf off period. Pick has a beaver dam on the inlet stream and I delineated only to the beaver dam. Site Area (km2) Max Depth (m) Mean Depth (m) Residence Time (days) Dates Sampled Deans 0.0041 3.52 2.03 46 8/16/22 - 8/17/228/30/22 - 8/31/22 Sister 3 0.0012 2.27 1.25 20 8/22/22 - 8/23/22 Catfish 0.0018 1.98 0.80 19 9/06/22 - 9/07/229/18/22 - 9/19/22 Pick 0.0077 3.80 1.58 45 8/22/22 - 8/23/22 1.1 Dissolved oxygen We recorded dissolved oxygen every 15 minutes 0.25 m below the surface in every impoundment. From 6/20/22 to 7/13/22, we also recorded dissolved oxygen 0.1m from the bottom of Pick in the deepest location in the impoundment. Because dissolved oxygen was consistently 0 mg/L, we reallocated our oxygen sensors and installed both a top and bottom DO sensor in Sister 3. 1.1.1 Deans 1.1.2 Catfish 1.1.3 Sister 3 1.1.4 Pick 1.1.5 All impoundments top DO ## png ## 2 ## png ## 2 Summary of DO during sampling ## # A tibble: 4 × 4 ## site min_do max_do mean_do ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Blue Herron 0.043 0.141 0.0495 ## 2 Catfish 0.359 7.64 5.54 ## 3 Deans 4.91 7.93 6.32 ## 4 Sister 7.19 9.26 8.40 1.2 Temperature 1.2.1 Deans ## Simple feature collection with 1 feature and 2 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 281634.8 ymin: 3751732 xmax: 281703.8 ymax: 3751859 ## Projected CRS: WGS 84 / UTM zone 17N ## # A tibble: 1 × 3 ## Shape_Leng Shape_Area geometry ## * &lt;dbl&gt; &lt;dbl&gt; &lt;POLYGON [m]&gt; ## 1 1114. 44732. ((281652.8 3751846, 281651.7 3751849, 281651.8 3751853, 281652.3 3751858, 281652.8 37… 1.2.2 Catfish 1.2.3 Sister 3 1.2.4 Pick 1.3 PAR All sensors were submerged ~0.25m below the water surface 1.3.1 Deans Sensor casing cracked, so no available PAR data for second Deans sampling 8/16/22 1.3.2 Catfish 9/6/22 1.3.3 Pick #9/13/22 1.3.4 Sister3 #8/22/22 1.4 Dissolved gas concentrations I sampled for dissolved gas 0.25 m from the surface of the impoundments, 0.1m from the bottom, in the inlet stream, and in the outlet stream. The dissolved gas samples from Catfish on 9/18/22-9/19/22 were not handled properly, thus those values are excluded from the summaries. ## `summarise()` has grouped output by &#39;Site&#39;, &#39;Collection.Date&#39;. You can override using the `.groups` argument. ## # A tibble: 20 × 7 ## # Groups: Site, Collection.Date [5] ## Site Collection.Date Location CH4_avg_umol CH4_sd CO2_avg_umol CO2_sd ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Pick 9/13/2022 top 98.7 3.09 560. 8.69 ## 2 Deans 8/31/2022 top 0.980 1.32 62.3 7.88 ## 3 Sister3 8/23/2022 top 0.849 0.0111 40.3 4.55 ## 4 Catfish 9/6/2022 top 0.586 0.00180 138. 5.69 ## 5 Deans 8/16/2022 top 0.583 0.0476 107. 3.11 ## 6 Pick 9/13/2022 bottom 126. 60.7 635. 161. ## 7 Sister3 8/23/2022 bottom 2.89 0.985 70.0 15.2 ## 8 Deans 8/16/2022 bottom 0.883 0.0543 88.9 16.4 ## 9 Catfish 9/6/2022 bottom 0.557 0.0686 164. 49.1 ## 10 Deans 8/31/2022 bottom 0.290 0.0597 36.6 6.79 ## 11 Deans 8/31/2022 inlet 16.9 4.77 377. 99.1 ## 12 Pick 9/13/2022 inlet 9.98 1.34 168. 9.29 ## 13 Deans 8/16/2022 inlet 9.95 2.86 234. 46.0 ## 14 Catfish 9/6/2022 inlet 0.598 0.197 141. 6.10 ## 15 Sister3 8/23/2022 inlet 0.0229 0.0000664 75.2 7.54 ## 16 Deans 8/31/2022 outlet 4.31 0.936 153. 44.1 ## 17 Sister3 8/23/2022 outlet 2.62 0.0720 81.8 8.42 ## 18 Catfish 9/6/2022 outlet 1.47 0.410 142. 9.15 ## 19 Pick 9/13/2022 outlet 0.365 0.170 160. 25.6 ## 20 Deans 8/16/2022 outlet 0.311 0.106 50.2 5.51 1.5 Wind Speed We took two 15 second averaged windspeed measurements over the course of each diffusive flux measurement. Note different x-axis scales. ## Warning: Removed 1 rows containing non-finite values (`stat_boxplot()`). 1.6 Residence time calculation I took a point estimate of discharge from the ponds while sampling, but these discharge values gave unrealistic residence times. I instead calculated discharge from a regional regression equation using average annual precipitation and watershed area (Gotvald et al. 2017). "],["diffusive-emissions.html", "Chapter 2 Diffusive emissions 2.1 Deans Diffusive 8/16/22-8/17/22 2.2 Deans Diffusive 8/30/22-8/31/22 2.3 Deans Cloud Comparison 2.4 Catfish Diffusive 9/6/22-9/7/22 2.5 Catfish Diffusive 9/18/22-9/19/22 2.6 Catfish Cloud Comparison 2.7 Pick Diffusive 9/13/22- 9/14/22 2.8 Sister3 Diffusive 8/22/22-8/23/22", " Chapter 2 Diffusive emissions 2.1 Deans Diffusive 8/16/22-8/17/22 2.2 Deans Diffusive 8/30/22-8/31/22 2.3 Deans Cloud Comparison ## Warning: package &#39;vembedr&#39; was built under R version 4.2.2 ## ## Attaching package: &#39;vembedr&#39; ## The following object is masked from &#39;package:hms&#39;: ## ## hms ## The following object is masked from &#39;package:lubridate&#39;: ## ## hms 2.4 Catfish Diffusive 9/6/22-9/7/22 2.5 Catfish Diffusive 9/18/22-9/19/22 2.6 Catfish Cloud Comparison 2.7 Pick Diffusive 9/13/22- 9/14/22 2.8 Sister3 Diffusive 8/22/22-8/23/22 diffusion_loc &lt;- diffusion %&gt;% mutate(date = date(start_time)) %&gt;% mutate(sampling = case_when( date == &quot;2022-08-16&quot; ~ &quot;Deans 8/16 - 8/17&quot;, date == &quot;2022-08-17&quot; ~ &quot;Deans 8/16 - 8/17&quot;, date == &quot;2022-08-30&quot; ~ &quot;Deans 8/30 - 8/31&quot;, date == &quot;2022-08-31&quot; ~ &quot;Deans 8/30 - 8/31&quot;, date == &quot;2022-09-06&quot; ~ &quot;Catfish 9/6 - 9/7&quot;, date == &quot;2022-09-07&quot; ~ &quot;Catfish 9/6 - 9/7&quot;, date == &quot;2022-09-18&quot; ~ &quot;Catfish 9/18 - 9/19&quot;, date == &quot;2022-09-19&quot; ~ &quot;Catfish 9/18 - 9/19&quot;, date == &quot;2022-09-13&quot; ~ &quot;Pick 9/13 - 9/14&quot;, date == &quot;2022-09-14&quot; ~ &quot;Pick 9/13 - 9/14&quot;, date == &quot;2022-08-22&quot; ~ &quot;Sister3 8/22 - 8/23&quot;, date == &quot;2022-08-23&quot; ~ &quot;Sister3 8/22 - 8/23&quot; )) %&gt;% filter(is.na(sampling)==FALSE) %&gt;% mutate(Transect = str_sub(location, 2, 2) %&gt;% as.numeric(), Loc = str_sub(location, 3, 3) %&gt;% as.factor()) diff.mod.ch4 &lt;- lmer(flux_ch4_g_hr ~ Transect + Loc + (1|sampling), data = diffusion_loc) summary(diff.mod.ch4) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ Transect + Loc + (1 | sampling) ## Data: diffusion_loc ## ## REML criterion at convergence: -4663.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.5162 -0.2554 -0.0122 0.1549 10.4023 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 2.255e-05 0.004749 ## Residual 1.464e-05 0.003827 ## Number of obs: 575, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 2.548e-03 2.009e-03 5.688e+00 1.268 0.25415 ## Transect -3.377e-04 1.178e-04 5.640e+02 -2.866 0.00431 ** ## LocB 1.677e-03 5.042e-04 5.640e+02 3.326 0.00094 *** ## LocC 5.074e-04 5.523e-04 5.640e+02 0.919 0.35867 ## LocD 4.171e-04 5.538e-04 5.640e+02 0.753 0.45163 ## LocE 1.041e-03 5.042e-04 5.640e+02 2.064 0.03945 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Trnsct LocB LocC LocD ## Transect -0.176 ## LocB -0.151 0.000 ## LocC -0.137 0.000 0.548 ## LocD -0.137 0.002 0.546 0.499 ## LocE -0.151 0.000 0.600 0.548 0.546 r2_nakagawa(diff.mod.ch4) ## # R2 for Mixed Models ## ## Conditional R2: 0.612 ## Marginal R2: 0.015 diff.mod.co2 &lt;- lmer(flux_co2_g_hr ~ Transect + Loc + (1|sampling), data = diffusion_loc) summary(diff.mod.co2) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ Transect + Loc + (1 | sampling) ## Data: diffusion_loc ## ## REML criterion at convergence: -634.6 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -5.8101 -0.3034 0.0067 0.2828 5.6719 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.003649 0.06041 ## Residual 0.017712 0.13309 ## Number of obs: 575, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.119746 0.030721 10.886664 3.898 0.00253 ** ## Transect -0.021439 0.004097 564.000942 -5.232 2.37e-07 *** ## LocB 0.055864 0.017536 564.000478 3.186 0.00152 ** ## LocC 0.022755 0.019209 564.000478 1.185 0.23669 ## LocD 0.052013 0.019260 564.003018 2.700 0.00713 ** ## LocE 0.051748 0.017536 564.000478 2.951 0.00330 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Trnsct LocB LocC LocD ## Transect -0.400 ## LocB -0.342 0.000 ## LocC -0.313 0.000 0.548 ## LocD -0.313 0.002 0.546 0.499 ## LocE -0.342 0.000 0.600 0.548 0.546 r2_nakagawa(diff.mod.co2) ## # R2 for Mixed Models ## ## Conditional R2: 0.218 ## Marginal R2: 0.057 ggplot(diffusion_loc %&gt;% filter(Site != &quot;Pick&quot;), aes(Transect, flux_ch4_g_hr, color = sampling))+geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula = &#39;y ~ x&#39; "],["ebullition.html", "Chapter 3 Ebullition 3.1 Deans Ebullitive 8/16/22-8/17/22 3.2 Deans Ebullitive 8/30/22-8/31/22 3.3 Catfish Ebullitive 9/06/22-9/07/22 3.4 Catfish Ebullitive 9/18/22-9/19/22 3.5 Pick Ebullitive 9/13/22-9/14/22 3.6 Sister Ebullitive 3 8/22/22-8/23/22", " Chapter 3 Ebullition 7.8% of gas volume observations indicated a decline in gas volume from one time period to the next. Most of these observations occurred at night and in the pond covered with Wolffia. I set all negative observations of volume greater than -0.5mL change equal to 0. All other negative gas volume observations (&lt;1%) were treated as missing data. Because there was insufficient gas volume to measure CH4 concentration at every time-point, I used the average CH4 concentration measured from ebullition in a sampling event to calculate ebullition for the following figures. 3.1 Deans Ebullitive 8/16/22-8/17/22 3.2 Deans Ebullitive 8/30/22-8/31/22 3.3 Catfish Ebullitive 9/06/22-9/07/22 3.4 Catfish Ebullitive 9/18/22-9/19/22 3.5 Pick Ebullitive 9/13/22-9/14/22 3.6 Sister Ebullitive 3 8/22/22-8/23/22 tm_shape(sister3)+ tm_polygons(col = &quot;white&quot;)+ tm_shape(sister3_pts_22_eb, bbox = st_bbox(catfish) %&gt;% st_as_sfc())+ tm_dots(&quot;ch4_eb_g_m2_hr&quot;, size = 0.5, shape = 21, palette = &quot;-RdYlBu&quot;, midpoint = NA, title = &quot;CH4 flux (g/m2/hr)&quot;)+ tm_layout(scale = 1.5, legend.outside = T)+ tm_facets(by = &quot;trip_wr&quot;, free.coords = F, inside.original.bbox = T) ## Warning: Removed 99 rows containing non-finite values (`stat_bin()`). "],["simple-kriging-just-in-space.html", "Chapter 4 Simple kriging just in space", " Chapter 4 Simple kriging just in space test_data &lt;- pick_pts_13 %&gt;% filter(trip == 2) # create x y trend model and pull residuals to krige test_data$x &lt;- st_coordinates(test_data) %&gt;% as.data.frame() %&gt;% pull(X) test_data$y &lt;- st_coordinates(test_data) %&gt;% as.data.frame() %&gt;% pull(Y) func_trend &lt;- as.formula(flux_co2_g_hr ~ x + y) lm_trend &lt;- lm(func_trend, data = test_data) summary(lm_trend) ## ## Call: ## lm(formula = func_trend, data = test_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.52583 -0.10096 -0.02899 0.21436 0.41754 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.815e+04 3.024e+04 1.593 0.1457 ## x -1.999e-02 7.032e-03 -2.842 0.0193 * ## y -1.130e-02 7.539e-03 -1.499 0.1680 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3229 on 9 degrees of freedom ## Multiple R-squared: 0.7654, Adjusted R-squared: 0.7132 ## F-statistic: 14.68 on 2 and 9 DF, p-value: 0.001468 test_data$resid_co2_g_hr &lt;- residuals(lm_trend) hist(test_data$resid_co2_g_hr) # function to return table with normal scores and original values to use for backtransform later nscore &lt;- function(x) { nscore &lt;- qqnorm(x, plot.it = FALSE)$x # normal score trn.table &lt;- data.frame(x=sort(x),nscore=sort(nscore)) return (trn.table) } # quantile-quantile normal score transform data test_data$resid_norm_co2_g_hr &lt;- qqnorm(test_data$resid_co2_g_hr, plot.it = F)$x nscore.tab &lt;- nscore(test_data$resid_co2_g_hr) plot(x~nscore, data=nscore.tab) plot(ecdf(test_data$resid_co2_g_hr)) plot(ecdf(test_data$resid_norm_co2_g_hr)) hist(test_data$resid_co2_g_hr) hist(test_data$resid_norm_co2_g_hr) mapview(test_data, zcol = &quot;resid_norm_co2_g_hr&quot;) # create isotropic variogram # width = lag distance (approximately minimum non zero data spacing) # cutoff = number of lags * lag distance (number of lags = 1/2 major axis/lag distance) # think about how cutoff and width parameters are impacting variogram calculation var.norm.iso &lt;- variogram(resid_norm_co2_g_hr~1, test_data ,cutoff = 70 ,width = 14) var.norm.th.iso &lt;- vgm(psill = 1, &quot;Exp&quot;, range = 17) # no nugget # plot theoretical with experimental variogram vm.norm.sim &lt;- variogramLine(var.norm.th.iso,maxdist=100,min=0.0001,n=100, covariance=FALSE) plot(var.norm.iso$dist,var.norm.iso$gamma, xlim = c(0,100)) lines(vm.norm.sim$dist,vm.norm.sim$gamma,col=&quot;blue&quot;) # create anisotropic variogram (doesn&#39;t appear to be enough data to do this/not well supported with residuals of gaussian transformed model) var.norm.045 = variogram(resid_norm_co2_g_hr~1,test_data,cutoff = 70,width =14,alpha = 45.0,tol.hor=22.5) # 045 directional var.norm.135 = variogram(resid_norm_co2_g_hr~1,test_data,cutoff = 70,width =14,alpha = 135.0,tol.hor=22.5) # 135 directional var.norm.th.ani&lt;- vgm(psill = 1, &quot;Exp&quot;, 17, anis = c(135, 0.5)) # plot theoretical anisotropic variograms with experimental variograms unit_vector = c(sin(45*pi/180),sin(45*pi/180),0) # unit vector for 035 azimuth vm.norm.sim.an.45 &lt;- variogramLine(var.norm.th.ani, maxdist=100,min=0.0001,n=100, covariance=FALSE, dir=unit_vector) unit_vector = c(sin(45*pi/180),-sin(45*pi/180),0) # unit vector for 035 azimuth vm.norm.sim.an.135 &lt;- variogramLine(var.norm.th.ani, maxdist=100,min=0.0001,n=100, covariance=FALSE, dir=unit_vector) plot(var.norm.135$dist, var.norm.135$gamma, col = &quot;green&quot;, pch=16) points(var.norm.045$dist, var.norm.045$gamma, col = &quot;red&quot;, pch=16) lines(vm.norm.sim.an.45$dist, vm.norm.sim.an.45$gamma, col =&quot;red&quot;) lines(vm.norm.sim.an.135$dist, vm.norm.sim.an.135$gamma, col =&quot;green&quot;) # create interpolation grid grid &lt;- st_as_stars(st_bbox(pick), dx = 1, dy = 1) grid &lt;- grid[pick] # ordinary kriging (assumption of stationarity of the mean is relaxed, mean is estimated locally) co2.kriged = krige(resid_norm_co2_g_hr~1, test_data, grid, model = var.norm.th.iso,maxdist = Inf,nmin = 0,omax=Inf) ## Warning in predict.gstat(g, newdata = newdata, block = block, nsim = nsim, : NAs introduced by coercion to ## integer range ## [using ordinary kriging] # simple kriging (mean is stationary) co2.kriged.sk = krige(resid_norm_co2_g_hr~1, test_data, grid, model = var.norm.th.iso,maxdist = Inf,nmin = 0,omax=Inf, beta = mean(test_data$resid_norm_co2_g_hr)) ## Warning in predict.gstat(g, newdata = newdata, block = block, nsim = nsim, : NAs introduced by coercion to ## integer range ## [using simple kriging] # ordinary and simple kriging (yield very similar results in this example) range(co2.kriged$var1.pred, na.rm = T) ## [1] -1.676307 1.670763 range(co2.kriged.sk$var1.pred, na.rm = T) ## [1] -1.675864 1.670890 plot(co2.kriged.sk) # backtransform normal scores # based on the gslib documentation, it looks like what you need to do is for each point interpolate between points in the normal score table and use an extrapolation function (possibly linear?) for points beyond the range above.max.lm &lt;- lm(x~nscore, data=nscore.tab[(nrow(nscore.tab)-1):nrow(nscore.tab),]) above.max.func &lt;- function(x){ coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) } below.min.lm &lt;- lm(x~nscore, data=nscore.tab[1:2,]) below.min.func &lt;- function(x){ coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) } interpolate &lt;- approxfun(x=nscore.tab$nscore, y=nscore.tab$x) backtr &lt;- function(x){ if(is.na(x)){ return(NA) } if(x&gt;max(nscore.tab$nscore)){ return(above.max.func(x)) } if(x&lt;min(nscore.tab$nscore)){ return(below.min.func(x)) } else{ return(interpolate(x)) } } co2.kriged.sk$backtransformed &lt;- apply(co2.kriged.sk$var1.pred, 1:2, backtr) # add back in the trend to the kriged backtransformed residuals co2.kriged.sk$trend &lt;- predict(co2.kriged.sk[3], lm_trend) co2.kriged.sk$detrended &lt;- co2.kriged.sk$trend + co2.kriged.sk$backtransformed # Sequential Gaussian simulation with isotropic variogram using simple kriging (but ordinary kriging also run) # Ortiz 2020 https://qspace.library.queensu.ca/bitstream/handle/1974/28538/2020-01-Ortiz-Simulation.pdf?sequence=2 indicates that you shouldn&#39;t use ordinary kriging in sequential gaussian simulation. The krige function I think allows you to use ordinary kriging and it looks like it might be trying to estimate beta within the function. co2.kriged.sim = krige(resid_norm_co2_g_hr~1, test_data, grid, model = var.norm.th.iso,maxdist = Inf,nmin = 0,omax=Inf, indicators=FALSE, nsim=4, nmax=100) # will take a second to run ## Warning in predict.gstat(g, newdata = newdata, block = block, nsim = nsim, : NAs introduced by coercion to ## integer range ## drawing 4 GLS realisations of beta... ## [using conditional Gaussian simulation] co2.kriged.sim.sk = krige(resid_norm_co2_g_hr~1, test_data, grid, model = var.norm.th.iso,maxdist = Inf,nmin = 0,omax=Inf, indicators=FALSE, nsim=4, nmax=100, beta = 0) # will take a second to run # mean should be zero after gaussian transformation # I don&#39;t know if beta is required here ## Warning in predict.gstat(g, newdata = newdata, block = block, nsim = nsim, : NAs introduced by coercion to ## integer range ## [using conditional Gaussian simulation] co2.kriged.sim.sk$backtransform &lt;- st_apply(co2.kriged.sim.sk[1], 1:3, backtr) str(co2.kriged.sim.sk) ## List of 2 ## $ var1 : num [1:220, 1:182, 1:4] NA NA NA NA NA NA NA NA NA NA ... ## ..- attr(*, &quot;names&quot;)= chr [1:160160] &quot;sim11&quot; &quot;sim12&quot; &quot;sim13&quot; &quot;sim14&quot; ... ## $ backtransform: num [1:220, 1:182, 1:4] NA NA NA NA NA NA NA NA NA NA ... ## - attr(*, &quot;dimensions&quot;)=List of 3 ## ..$ x :List of 7 ## .. ..$ from : num 1 ## .. ..$ to : int 220 ## .. ..$ offset: num 287504 ## .. ..$ delta : num 1 ## .. ..$ refsys:List of 2 ## .. .. ..$ input: chr &quot;EPSG:32617&quot; ## .. .. ..$ wkt : chr &quot;PROJCRS[\\&quot;WGS 84 / UTM zone 17N\\&quot;,\\n BASEGEOGCRS[\\&quot;WGS 84\\&quot;,\\n ENSEMBLE[\\&quot;World Geodetic System 1984 &quot;| __truncated__ ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;crs&quot; ## .. ..$ point : logi NA ## .. ..$ values: NULL ## .. ..- attr(*, &quot;class&quot;)= chr &quot;dimension&quot; ## ..$ y :List of 7 ## .. ..$ from : num 1 ## .. ..$ to : int 182 ## .. ..$ offset: num 3752091 ## .. ..$ delta : num -1 ## .. ..$ refsys:List of 2 ## .. .. ..$ input: chr &quot;EPSG:32617&quot; ## .. .. ..$ wkt : chr &quot;PROJCRS[\\&quot;WGS 84 / UTM zone 17N\\&quot;,\\n BASEGEOGCRS[\\&quot;WGS 84\\&quot;,\\n ENSEMBLE[\\&quot;World Geodetic System 1984 &quot;| __truncated__ ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;crs&quot; ## .. ..$ point : logi NA ## .. ..$ values: NULL ## .. ..- attr(*, &quot;class&quot;)= chr &quot;dimension&quot; ## ..$ sample:List of 7 ## .. ..$ from : num 1 ## .. ..$ to : int 4 ## .. ..$ offset: num NA ## .. ..$ delta : num NA ## .. ..$ refsys: chr NA ## .. ..$ point : logi NA ## .. ..$ values: chr [1:4] &quot;sim1&quot; &quot;sim2&quot; &quot;sim3&quot; &quot;sim4&quot; ## .. ..- attr(*, &quot;class&quot;)= chr &quot;dimension&quot; ## ..- attr(*, &quot;raster&quot;)=List of 4 ## .. ..$ affine : num [1:2] 0 0 ## .. ..$ dimensions : chr [1:2] &quot;x&quot; &quot;y&quot; ## .. ..$ curvilinear: logi FALSE ## .. ..$ blocksizes : NULL ## .. ..- attr(*, &quot;class&quot;)= chr &quot;stars_raster&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;dimensions&quot; ## - attr(*, &quot;class&quot;)= chr &quot;stars&quot; plot(co2.kriged.sim.sk[1]) plot(co2.kriged.sim.sk[2]) co2.kriged.sim.sk$trend &lt;- predict(co2.kriged.sim.sk[2], lm_trend) co2.kriged.sim.sk$detrended &lt;- co2.kriged.sim.sk[2] + co2.kriged.sim.sk[3] plot(co2.kriged.sim.sk[4]) mapview(co2.kriged.sim.sk[4,,,1]) mapview(co2.kriged.sim.sk[4,,,2]) mapview(co2.kriged.sim.sk[4,,,3]) mapview(co2.kriged.sim.sk[4,,,4]) # total CO2 flux estimate (in grams) from simulations sum(co2.kriged.sim.sk[4,,,1]$detrended, na.rm = T) ## [1] 719.7758 sum(co2.kriged.sim.sk[4,,,2]$detrended, na.rm = T) ## [1] -139.0039 sum(co2.kriged.sim.sk[4,,,3]$detrended, na.rm = T) ## [1] 837.3433 sum(co2.kriged.sim.sk[4,,,4]$detrended, na.rm = T) ## [1] -231.503 # total CO2 flux estimate using only the mean of measured data values st_area(pick) %&gt;% as.numeric()*mean(test_data$flux_co2_g_hr) ## [1] 702.4269 mapshot( mapview(co2.kriged.sim.sk[4,,,1], layer.name = &quot;CO2 Flux (g m-2 hr-1)&quot;), file = &quot;example-gaussian-sim.png&quot;, remove_controls = c(&quot;zoomControl&quot;, &quot;homeButton&quot;, &quot;drawToolbar&quot;, &quot;easyButton&quot;) ) mapshot( mapview(pick, col.regions = NA, legend = F, homebutton = F) + mapview(test_data, zcol = &quot;flux_co2_g_hr&quot;, col.regions = viridis::viridis_pal(option = &quot;B&quot;), layer.name = &quot; CO2 Flux (g/m2/hr)&quot;), file = &quot;example-gaussian-sim-pts.png&quot;, remove_controls = c(&quot;zoomControl&quot;, &quot;homeButton&quot;, &quot;drawToolbar&quot;, &quot;easyButton&quot;) ) "],["ebullition-analysis.html", "Chapter 5 Ebullition Analysis 5.1 Plots 5.2 Mod1: Non-zero data, fixed effects only 5.3 Mod2: Non zero data, mixed model 5.4 Mod2.a: Non zero data, mixed model without Picks 5.5 Mod2.b: Non zero data, mixed model only Picks 5.6 Mod3: Logistic regression, fixed effects only 5.7 Mod4: Logistic regression, mixed model 5.8 Mod4.a: Logistic regression, mixed model without Picks 5.9 Mod4.b: Logistic regression, mixed model only Picks 5.10 Mod5: Hurdle model, predictors generate structural zeros 5.11 Model selection with Mod5 predictors 5.12 Mod6: Hurdle model, equal probability of structural zeros 5.13 Mod7: Not broken up by time, no longer zero-inflated, sampling random effect 5.14 By transect", " Chapter 5 Ebullition Analysis I want to evaluate the relationship between ebullitive flux of CH4 and depth and distance to the inlet. I hypothesized that both depth and distance to the inlet will be negatively associated with ebullitive flux. Ultimately, we have to deal with the fact that the data are zero-inflated and bounded by 0. I tried multiple models below to address these characteristics eb_all &lt;- bind_rows(sister3_pts_22_eb %&gt;% mutate(Site =&quot;Sister3&quot;), pick_pts_13_eb, catfish_pts_18_eb %&gt;% dplyr::select(-c(catfish_dist_1, catfish_dist_2)), catfish_pts_06_eb %&gt;% dplyr::select(-c(catfish_dist_1, catfish_dist_2)), deans_pts_30_eb %&gt;% dplyr::select(-c(deans_dist_1, deans_dist_2)), deans_pts_16_eb%&gt;% dplyr::select(-c(deans_dist_1, deans_dist_2))) %&gt;% mutate(Site = as.factor(Site))%&gt;% mutate(Depth_scale = scale(Depth), inlet_dist_scale = scale(inlet_dist)) ebullition_24 &lt;- eb_all %&gt;% mutate(ch4_eb_g = gas_vol_corrected * (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15), Collection.Start.Date = case_when( Sampling == &quot;Deans1&quot; ~ ymd(&quot;2022-08-16&quot;), Sampling == &quot;Deans2&quot; ~ ymd(&quot;2022-08-30&quot;), Sampling == &quot;Catfish1&quot; ~ ymd(&quot;2022-09-06&quot;), Sampling == &quot;Catfish2&quot; ~ ymd(&quot;2022-09-18&quot;), Sampling == &quot;Pick1&quot; ~ ymd(&quot;2022-09-13&quot;), Sampling == &quot;Sister31&quot; ~ ymd(&quot;2022-08-22&quot;) )) %&gt;% mutate(time_hr_na = if_else(is.na(ch4_eb_g), NA_real_, time_hr)) %&gt;% group_by(Site, Trap, Sampling, Collection.Start.Date, inlet_dist, Depth, inlet_dist_scale, Depth_scale) %&gt;% summarize(sum_time = sum(time_hr_na, na.rm = T), sum_g = sum(ch4_eb_g, na.rm = T)) %&gt;% mutate(area = pi * 81 * 0.0001, ch4_eb_g_m2_hr_24 = sum_g * (1/area)* (1/sum_time)) ## `summarise()` has grouped output by &#39;Site&#39;, &#39;Trap&#39;, &#39;Sampling&#39;, &#39;Collection.Start.Date&#39;, &#39;inlet_dist&#39;, ## &#39;Depth&#39;, &#39;inlet_dist_scale&#39;. You can override using the `.groups` argument. 5.1 Plots ## Warning in cor.test.default(eb_all$Depth, eb_all$inlet_dist, method = &quot;spearman&quot;): Cannot compute exact ## p-value with ties ## ## Spearman&#39;s rank correlation rho ## ## data: eb_all$Depth and eb_all$inlet_dist ## S = 232420659, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.3853327 ## Warning: Removed 102 rows containing missing values (`geom_point()`). ## Warning: Removed 99 rows containing missing values (`geom_point()`). 5.2 Mod1: Non-zero data, fixed effects only ## ## Call: ## glm(formula = ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale, ## family = Gamma(link = &quot;log&quot;), data = eb_all %&gt;% filter(ch4_eb_g_m2_hr &gt; ## 0)) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -3.0371 -1.3024 -0.7659 0.1164 6.1579 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -5.04284 0.07453 -67.658 &lt; 2e-16 *** ## Depth_scale -0.39865 0.07925 -5.030 6.46e-07 *** ## inlet_dist_scale 0.42694 0.07079 6.031 2.84e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Gamma family taken to be 3.338868) ## ## Null deviance: 1051.4 on 606 degrees of freedom ## Residual deviance: 946.0 on 604 degrees of freedom ## (3 observations deleted due to missingness) ## AIC: -4870.2 ## ## Number of Fisher Scoring iterations: 20 5.3 Mod2: Non zero data, mixed model ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Data: eb_all %&gt;% filter(ch4_eb_g_m2_hr &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -4977.1 -4950.6 2494.5 -4989.1 601 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.6576 -0.4957 -0.3276 0.0486 8.5309 ## ## Random effects: ## Groups Name Variance Std.Dev. ## trip_wr (Intercept) 0.1412 0.3757 ## Sampling (Intercept) 1.0126 1.0063 ## Residual 2.2635 1.5045 ## Number of obs: 607, groups: trip_wr, 9; Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.25559 0.28871 -18.20 &lt;2e-16 *** ## Depth_scale -0.12866 0.05593 -2.30 0.0214 * ## inlet_dist_scale -0.04922 0.07812 -0.63 0.5286 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Dpth_s ## Depth_scale 0.007 ## inlt_dst_sc 0.009 -0.604 ## [1] 0.9605394 ## [1] 63.9355 5.4 Mod2.a: Non zero data, mixed model without Picks ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Data: eb_all %&gt;% filter(ch4_eb_g_m2_hr &gt; 0, Site != &quot;Picks&quot;) ## ## AIC BIC logLik deviance df.resid ## -4335.0 -4309.9 2173.5 -4347.0 483 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.8500 -0.5872 -0.3402 0.2238 7.8848 ## ## Random effects: ## Groups Name Variance Std.Dev. ## trip_wr (Intercept) 0.1621 0.4027 ## Sampling (Intercept) 0.1294 0.3597 ## Residual 1.3683 1.1697 ## Number of obs: 489, groups: trip_wr, 9; Sampling, 5 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.88892 0.18879 -31.192 &lt; 2e-16 *** ## Depth_scale -0.33452 0.05902 -5.668 1.45e-08 *** ## inlet_dist_scale -0.69166 0.10408 -6.646 3.02e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Dpth_s ## Depth_scale -0.063 ## inlt_dst_sc 0.216 -0.429 ## [1] 0.8934819 ## [1] 28.12695 5.5 Mod2.b: Non zero data, mixed model only Picks ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale + (1 | trip_wr) ## Data: eb_all %&gt;% filter(ch4_eb_g_m2_hr &gt; 0, Site == &quot;Picks&quot;) ## ## AIC BIC logLik deviance df.resid ## -758.6 -744.8 384.3 -768.6 113 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.8575 -0.6547 -0.3588 0.2529 4.1793 ## ## Random effects: ## Groups Name Variance Std.Dev. ## trip_wr (Intercept) 0.08694 0.2949 ## Residual 1.25959 1.1223 ## Number of obs: 118, groups: trip_wr, 9 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -4.28414 0.20539 -20.858 &lt;2e-16 *** ## Depth_scale 0.22936 0.08917 2.572 0.0101 * ## inlet_dist_scale -0.04199 0.09275 -0.453 0.6507 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Dpth_s ## Depth_scale 0.468 ## inlt_dst_sc -0.773 -0.676 5.6 Mod3: Logistic regression, fixed effects only ## ## Call: ## glm(formula = ch4_eb_bin ~ Depth_scale + inlet_dist_scale, family = binomial(link = &quot;logit&quot;), ## data = eb_all %&gt;% mutate(ch4_eb_bin = if_else(ch4_eb_g_m2_hr &gt; ## 0, 1, 0))) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.5224 -1.1802 -0.9237 1.1543 1.4610 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.0005558 0.0578164 -0.010 0.99233 ## Depth_scale -0.2726690 0.0615884 -4.427 9.54e-06 *** ## inlet_dist_scale 0.1683809 0.0633510 2.658 0.00786 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 1691.2 on 1219 degrees of freedom ## Residual deviance: 1669.7 on 1217 degrees of freedom ## (102 observations deleted due to missingness) ## AIC: 1675.7 ## ## Number of Fisher Scoring iterations: 4 5.7 Mod4: Logistic regression, mixed model ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: binomial ( logit ) ## Formula: ch4_eb_bin ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Data: eb_all %&gt;% mutate(ch4_eb_bin = if_else(ch4_eb_g_m2_hr &gt; 0, 1, 0)) ## ## AIC BIC logLik deviance df.resid ## 1638.7 1664.2 -814.3 1628.7 1215 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.5389 -0.8958 -0.5247 0.9325 1.8398 ## ## Random effects: ## Groups Name Variance Std.Dev. ## trip_wr (Intercept) 0.1305 0.3612 ## Sampling (Intercept) 0.2655 0.5152 ## Number of obs: 1220, groups: trip_wr, 9; Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.04498 0.24986 0.180 0.85714 ## Depth_scale -0.23113 0.07635 -3.027 0.00247 ** ## inlet_dist_scale -0.15614 0.10993 -1.420 0.15551 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Dpth_s ## Depth_scale -0.005 ## inlt_dst_sc -0.017 -0.385 5.8 Mod4.a: Logistic regression, mixed model without Picks ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: binomial ( logit ) ## Formula: ch4_eb_bin ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Data: eb_all %&gt;% filter(Site != &quot;Picks&quot;) %&gt;% mutate(ch4_eb_bin = if_else(ch4_eb_g_m2_hr &gt; 0, 1, 0)) ## ## AIC BIC logLik deviance df.resid ## 1369.3 1394.1 -679.7 1359.3 1040 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.2651 -0.8673 -0.5219 0.9084 2.5019 ## ## Random effects: ## Groups Name Variance Std.Dev. ## trip_wr (Intercept) 0.1984 0.4454 ## Sampling (Intercept) 0.1151 0.3392 ## Number of obs: 1045, groups: trip_wr, 9; Sampling, 5 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.36037 0.22819 -1.579 0.11427 ## Depth_scale -0.28580 0.08987 -3.180 0.00147 ** ## inlet_dist_scale -0.78095 0.15319 -5.098 3.43e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Dpth_s ## Depth_scale -0.058 ## inlt_dst_sc 0.224 -0.271 5.9 Mod4.b: Logistic regression, mixed model only Picks ## ## Call: ## glm(formula = ch4_eb_bin ~ Depth_scale + inlet_dist_scale, family = binomial(link = &quot;logit&quot;), ## data = eb_all %&gt;% filter(Site == &quot;Picks&quot;) %&gt;% mutate(ch4_eb_bin = if_else(ch4_eb_g_m2_hr &gt; ## 0, 1, 0))) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.6482 -1.4017 0.8133 0.9002 0.9866 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.5248 0.3100 1.693 0.0904 . ## Depth_scale 0.0757 0.1700 0.445 0.6561 ## inlet_dist_scale 0.1119 0.1596 0.701 0.4833 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 220.89 on 174 degrees of freedom ## Residual deviance: 219.34 on 172 degrees of freedom ## (49 observations deleted due to missingness) ## AIC: 225.34 ## ## Number of Fisher Scoring iterations: 4 5.10 Mod5: Hurdle model, predictors generate structural zeros ## Family: Gamma ( inverse ) ## Formula: ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Zero inflation: ~. ## Data: eb_all %&gt;% filter(is.na(ch4_eb_g_m2_hr) == F) %&gt;% st_drop_geometry() ## ## AIC BIC logLik deviance df.resid ## -3334.1 -3277.9 1678.0 -3356.1 1209 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 13181.4 114.81 ## trip_wr (Intercept) 627.9 25.06 ## Number of obs: 1220, groups: Sampling, 6; trip_wr, 9 ## ## Zero-inflation model: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 0.2655 0.5152 ## trip_wr (Intercept) 0.1305 0.3612 ## Number of obs: 1220, groups: Sampling, 6; trip_wr, 9 ## ## Dispersion estimate for Gamma family (sigma^2): 1.12 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 217.6529 49.0191 4.440 8.99e-06 *** ## Depth_scale -2.1773 5.4050 -0.403 0.687 ## inlet_dist_scale 0.1156 5.7618 0.020 0.984 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Zero-inflation model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.04497 0.24987 -0.180 0.85717 ## Depth_scale 0.23114 0.07638 3.026 0.00248 ** ## inlet_dist_scale 0.15614 0.11002 1.419 0.15585 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 5.11 Model selection with Mod5 predictors ## Warning in (function (start, objective, gradient = NULL, hessian = NULL, : NA/NaN function evaluation ## Warning in (function (start, objective, gradient = NULL, hessian = NULL, : NA/NaN function evaluation ## ## Model selection based on AICc: ## ## K AICc Delta_AICc AICcWt Cum.Wt LL ## mod5.b 9 -3346.95 0.00 0.99 0.99 1682.55 ## mod5.a 9 -3335.91 11.04 0.00 1.00 1677.03 ## mod5 11 -3333.88 13.07 0.00 1.00 1678.05 ## Family: Gamma ( inverse ) ## Formula: ch4_eb_g_m2_hr ~ inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Zero inflation: ~. ## Data: eb_all %&gt;% filter(is.na(ch4_eb_g_m2_hr) == F) %&gt;% st_drop_geometry() ## ## AIC BIC logLik deviance df.resid ## -3347.1 -3301.1 1682.5 -3365.1 1214 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 12887.6 113.52 ## trip_wr (Intercept) 652.7 25.55 ## Number of obs: 1223, groups: Sampling, 6; trip_wr, 9 ## ## Zero-inflation model: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 0.3736 0.6113 ## trip_wr (Intercept) 0.1267 0.3560 ## Number of obs: 1223, groups: Sampling, 6; trip_wr, 9 ## ## Dispersion estimate for Gamma family (sigma^2): 1.12 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 217.704 48.544 4.485 7.3e-06 *** ## inlet_dist_scale -1.215 4.579 -0.265 0.791 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Zero-inflation model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.04541 0.28286 -0.160 0.87247 ## inlet_dist_scale 0.30065 0.10016 3.002 0.00268 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 5.12 Mod6: Hurdle model, equal probability of structural zeros ## Family: Gamma ( inverse ) ## Formula: ch4_eb_g_m2_hr ~ Depth_scale + inlet_dist_scale + (1 | Sampling) + (1 | trip_wr) ## Zero inflation: ~1 ## Data: eb_all %&gt;% filter(is.na(ch4_eb_g_m2_hr) == F) %&gt;% st_drop_geometry() ## ## AIC BIC logLik deviance df.resid ## -3279.5 -3243.8 1646.8 -3293.5 1213 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 13181.5 114.81 ## trip_wr (Intercept) 627.9 25.06 ## Number of obs: 1220, groups: Sampling, 6; trip_wr, 9 ## ## Dispersion estimate for Gamma family (sigma^2): 1.12 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 217.6502 49.0191 4.440 8.99e-06 *** ## Depth_scale -2.1774 5.4050 -0.403 0.687 ## inlet_dist_scale 0.1153 5.7619 0.020 0.984 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Zero-inflation model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.009838 0.057261 0.172 0.864 5.13 Mod7: Not broken up by time, no longer zero-inflated, sampling random effect ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ Depth + inlet_dist + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1361.9 -1347.1 686.0 -1371.9 137 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.6933 -0.4869 -0.3106 0.0965 8.5753 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.293 1.137 ## Residual 1.989 1.410 ## Number of obs: 142, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.437752 0.374383 -14.525 &lt;2e-16 *** ## Depth -0.298416 0.124667 -2.394 0.0167 * ## inlet_dist -0.001263 0.003096 -0.408 0.6832 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Depth ## Depth -0.126 ## inlet_dist -0.231 -0.635 ## # R2 for Mixed Models ## ## Conditional R2: 0.411 ## Marginal R2: 0.028 ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ inlet_dist + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1365.1 -1353.2 686.5 -1373.1 139 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.7281 -0.5353 -0.3365 0.1224 7.4056 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.525 1.235 ## Residual 1.791 1.338 ## Number of obs: 143, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.558643 0.412348 -13.480 &lt;2e-16 *** ## inlet_dist -0.005532 0.002316 -2.388 0.0169 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## inlet_dist -0.352 ## # R2 for Mixed Models ## ## Conditional R2: 0.475 ## Marginal R2: 0.028 ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ Depth + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1363.8 -1351.9 685.9 -1371.8 138 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.7000 -0.4970 -0.2949 0.0948 8.4736 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.101 1.049 ## Residual 1.954 1.398 ## Number of obs: 142, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.47156 0.05698 -96.031 &lt; 2e-16 *** ## Depth -0.33127 0.04623 -7.166 7.74e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## Depth -0.036 ## # R2 for Mixed Models ## ## Conditional R2: 0.380 ## Marginal R2: 0.030 ## Depth inlet_dist ch4_eb_g_m2_hr_24 ## Depth 1.00000000 0.3384937 -0.07818617 ## inlet_dist 0.33849373 1.0000000 0.22664523 ## ch4_eb_g_m2_hr_24 -0.07818617 0.2266452 1.00000000 ## Depth inlet_dist ch4_eb_g_m2_hr_24 ## Depth 1.0000000 0.3805896 -0.3615451 ## inlet_dist 0.3805896 1.0000000 -0.1231408 ## ch4_eb_g_m2_hr_24 -0.3615451 -0.1231408 1.0000000 5.14 By transect mod8 &lt;- glmer(ch4_eb_g_m2_hr_24 ~ Transect + (1|Sampling), data = ebullition_24 %&gt;% mutate(Transect = str_sub(Trap, 2, 2) %&gt;% as.numeric()) %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0), family = Gamma(link = &quot;log&quot;)) summary(mod8) ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ Transect + (1 | Sampling) ## Data: ebullition_24 %&gt;% mutate(Transect = str_sub(Trap, 2, 2) %&gt;% as.numeric()) %&gt;% ## filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1402.0 -1390.1 705.0 -1410.0 139 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.7665 -0.5281 -0.2446 0.2079 8.8986 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.101 1.049 ## Residual 1.585 1.259 ## Number of obs: 143, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -7.12885 0.38159 -18.682 &lt; 2e-16 *** ## Transect 0.36462 0.05145 7.087 1.37e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## Transect -0.408 r2_nakagawa(mod8) ## # R2 for Mixed Models ## ## Conditional R2: 0.464 ## Marginal R2: 0.091 ## Warning: Removed 1 rows containing missing values (`geom_point()`). "],["diffusion-estimates.html", "Chapter 6 Diffusion estimates", " Chapter 6 Diffusion estimates Deans 8/16/22 CO2 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(deans_pts_16$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_pts_16 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_deans_20220816_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # dean_16_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 18) # # # make interpolation grid # dean_grid &lt;- st_as_stars(st_bbox(deans), dx = 1, dy = 1) # dean_grid &lt;- dean_grid[deans] # # deans_16_co2_results &lt;- NULL # deans_16_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), dean_grid, model = dean_16_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # deans_16_co2_results &lt;- bind_rows(deans_16_co2_results, temp_df) # deans_16_co2_results_summarized &lt;- bind_rows(deans_16_co2_results_summarized, temp_df_sum) # # } # # write.csv(deans_16_co2_results_summarized, &quot;5-Results/1-kriged-estimates/deans_16_co2_results_summarized.csv&quot;, row.names = F) Deans 8/16/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(deans_pts_16$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_pts_16 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_deans_20220816_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # deans_16_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 20) # # # make interpolation grid # dean_grid &lt;- st_as_stars(st_bbox(deans), dx = 1, dy = 1) # dean_grid &lt;- dean_grid[deans] # # deans_16_ch4_results &lt;- NULL # deans_16_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), dean_grid, model = deans_16_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, gas = &quot;CH4&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # deans_16_ch4_results &lt;- bind_rows(deans_16_ch4_results, temp_df) # deans_16_ch4_results_summarized &lt;- bind_rows(deans_16_ch4_results_summarized, temp_df_sum) # # } # # write.csv(deans_16_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/deans_16_ch4_results_summarized.csv&quot;, row.names = F) Deans 8/30/22 CO2 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(deans_pts_30$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_pts_30 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_deans_20220830_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # dean_30_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 18) # # # make interpolation grid # dean_grid &lt;- st_as_stars(st_bbox(deans), dx = 1, dy = 1) # dean_grid &lt;- dean_grid[deans] # # deans_30_co2_results &lt;- NULL # deans_30_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), dean_grid, model = dean_30_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # deans_30_co2_results &lt;- bind_rows(deans_30_co2_results, temp_df) # deans_30_co2_results_summarized &lt;- bind_rows(deans_30_co2_results_summarized, temp_df_sum) # # } # # write.csv(deans_30_co2_results_summarized, &quot;5-Results/1-kriged-estimates/deans_30_co2_results_summarized.csv&quot;, row.names = F) Deans 8/30/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(deans_pts_30$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_pts_30 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_deans_20220830_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # dean_30_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 20) # # # make interpolation grid # dean_grid &lt;- st_as_stars(st_bbox(deans), dx = 1, dy = 1) # dean_grid &lt;- dean_grid[deans] # # deans_30_ch4_results &lt;- NULL # deans_30_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), dean_grid, model = dean_30_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # deans_30_ch4_results &lt;- bind_rows(deans_30_ch4_results, temp_df) # deans_30_ch4_results_summarized &lt;- bind_rows(deans_30_ch4_results_summarized, temp_df_sum) # # } # # write.csv(deans_30_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/deans_30_ch4_results_summarized.csv&quot;, row.names = F) Catfish 9/6/22 CO2 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(catfish_pts_06$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_pts_06 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_catfish_20220906_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # catfish_06_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 12) # # # make interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_06_co2_results &lt;- NULL # catfish_06_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), catfish_grid, model = catfish_06_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # catfish_06_co2_results &lt;- bind_rows(catfish_06_co2_results, temp_df) # catfish_06_co2_results_summarized &lt;- bind_rows(catfish_06_co2_results_summarized, temp_df_sum) # # } # # write.csv(catfish_06_co2_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_06_co2_results_summarized.csv&quot;, row.names = F) Catfish 9/6/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(catfish_pts_06$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_pts_06 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_catfish_20220906_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # catfish_06_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 12) # # # make interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_06_ch4_results &lt;- NULL # catfish_06_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), catfish_grid, model = catfish_06_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, gas = &quot;CH4&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # catfish_06_ch4_results &lt;- bind_rows(catfish_06_ch4_results, temp_df) # catfish_06_ch4_results_summarized &lt;- bind_rows(catfish_06_ch4_results_summarized, temp_df_sum) # # } # # write.csv(catfish_06_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_06_ch4_results_summarized.csv&quot;, row.names = F) Catfish 9/18/22 CO2 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(catfish_pts_18$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_pts_18 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_catfish_20220918_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # catfish_18_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 14) # # # make interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_18_co2_results &lt;- NULL # catfish_18_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), catfish_grid, model = catfish_18_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # catfish_18_co2_results &lt;- bind_rows(catfish_18_co2_results, temp_df) # catfish_18_co2_results_summarized &lt;- bind_rows(catfish_18_co2_results_summarized, temp_df_sum) # # } # # write.csv(catfish_18_co2_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_18_co2_results_summarized.csv&quot;, row.names = F) Catfish 9/18/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(catfish_pts_18$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_pts_18 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_catfish_202209018_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # catfish_18_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 10) # # # make interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_18_ch4_results &lt;- NULL # catfish_18_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), catfish_grid, model = catfish_18_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, gas = &quot;CH4&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # catfish_18_ch4_results &lt;- bind_rows(catfish_18_ch4_results, temp_df) # catfish_18_ch4_results_summarized &lt;- bind_rows(catfish_18_ch4_results_summarized, temp_df_sum) # # } # # write.csv(catfish_18_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_18_ch4_results_summarized.csv&quot;, row.names = F) Sister3 8/22/22 CO2 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(sister3_pts_22$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- sister3_pts_22 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_sister3_20220822_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # sister3_22_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 7) # # # make interpolation grid # sister3_grid &lt;- st_as_stars(st_bbox(sister3), dx = 1, dy = 1) # sister3_grid &lt;- sister3_grid[sister3] # # sister3_22_co2_results &lt;- NULL # sister3_22_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), sister3_grid, model = sister3_22_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Sister3&quot;, date = &quot;2022-08-22&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Sister3&quot;, date = &quot;2022-08-22&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # sister3_22_co2_results &lt;- bind_rows(sister3_22_co2_results, temp_df) # sister3_22_co2_results_summarized &lt;- bind_rows(sister3_22_co2_results_summarized, temp_df_sum) # # } # # write.csv(sister3_22_co2_results_summarized, &quot;5-Results/1-kriged-estimates/sister3_22_co2_results_summarized.csv&quot;, row.names = F) Sister3 8/22/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(sister3_pts_22$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- sister3_pts_22 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_sister3_20220822_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # sister3_22_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 5) # # # make interpolation grid # sister3_grid &lt;- st_as_stars(st_bbox(sister3), dx = 1, dy = 1) # sister3_grid &lt;- sister3_grid[sister3] # # # sister3_22_ch4_results &lt;- NULL # sister3_22_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), sister3_grid, model = sister3_22_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Sister3&quot;, date = &quot;2022-08-22&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Sister3&quot;, date = &quot;2022-08-22&quot;, period = i, gas = &quot;CH4&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # sister3_22_ch4_results &lt;- bind_rows(sister3_22_ch4_results, temp_df) # sister3_22_ch4_results_summarized &lt;- bind_rows(sister3_22_ch4_results_summarized, temp_df_sum) # # } # # write.csv(sister3_22_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/sister3_22_ch4_results_summarized.csv&quot;, row.names = F) Pick 9/13/22 CO2 Estimate # # modeling with a trend # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(pick_pts_13$trip) # var.lst &lt;- list() # func_trend &lt;- as.formula(flux_co2_g_hr ~ x + y) # # pick_pts_13$x &lt;- st_coordinates(pick_pts_13) %&gt;% as.data.frame() %&gt;% pull(X) # pick_pts_13$y &lt;- st_coordinates(pick_pts_13) %&gt;% as.data.frame() %&gt;% pull(Y) # # for(i in 1:length(periods)){ # # var.lst$data[[i]] &lt;- pick_pts_13 %&gt;% filter(trip == periods[i]) # var.lst$lm[[i]] &lt;- lm(func_trend, data = var.lst$data[[i]]) # # var.lst$data[[i]]$resid_co2_g_hr &lt;- residuals(var.lst$lm[[i]]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_co2_g_hr &lt;- qqnorm(var.lst$data[[i]]$resid_co2_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$resid_co2_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_pick_20220913_co2.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # pick_13_var_co2 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 20) # # # make interpolation grid # pick_grid &lt;- st_as_stars(st_bbox(pick), dx = 1, dy = 1) # pick_grid &lt;- pick_grid[pick] # # pick_13_co2_results &lt;- NULL # pick_13_co2_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_co2_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_co2_g_hr) == F), pick_grid, model = pick_13_var_co2, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # var.lst$kriged[[i]]$trend &lt;- predict(var.lst$kriged[[i]][2], var.lst$lm[[i]]) # # var.lst$kriged[[i]]$detrended &lt;- var.lst$kriged[[i]]$trend + var.lst$kriged[[i]]$backtransformed # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][4,,,f]$detrended, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, gas = &quot;CO2&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, gas = &quot;CO2&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # pick_13_co2_results &lt;- bind_rows(pick_13_co2_results, temp_df) # pick_13_co2_results_summarized &lt;- bind_rows(pick_13_co2_results_summarized, temp_df_sum) # # } # # write.csv(pick_13_co2_results_summarized, &quot;5-Results/1-kriged-estimates/pick_13_co2_results_summarized.csv&quot;, row.names = F) Pick 9/13/22 CH4 Estimate # sim_num &lt;- 500 # n_num &lt;- 500 # # periods &lt;- unique(pick_pts_13$trip) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- pick_pts_13 %&gt;% filter(trip == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_ch4_g_hr &lt;- qqnorm(var.lst$data[[i]]$flux_ch4_g_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$flux_ch4_g_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # make a pdf of all of the experimental variograms # pdf(&quot;5-Results/1-kriged-estimates/variograms_pick_20220913_ch4.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # dev.off() # # # # define theoretical variogram # pick_13_var_ch4 &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 20) # # # make interpolation grid # pick_grid &lt;- st_as_stars(st_bbox(pick), dx = 1, dy = 1) # pick_grid &lt;- pick_grid[pick] # # pick_13_ch4_results &lt;- NULL # pick_13_ch4_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # # #change nsim and nmax for runs # var.lst$kriged[[i]] &lt;- krige(norm_ch4_g_hr~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_ch4_g_hr) == F), pick_grid, model = pick_13_var_ch4, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec) # temp_df_sum &lt;- data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, gas = &quot;CH4&quot;, flux_2.5 = as.numeric(quantile(sim_vec, 0.025)), flux_97.5 = as.numeric(quantile(sim_vec, 0.975)), mean_flux = mean(sim_vec)) # pick_13_ch4_results &lt;- bind_rows(pick_13_ch4_results, temp_df) # pick_13_ch4_results_summarized &lt;- bind_rows(pick_13_ch4_results_summarized, temp_df_sum) # # } # # write.csv(pick_13_ch4_results_summarized, &quot;5-Results/1-kriged-estimates/pick_13_ch4_results_summarized.csv&quot;, row.names = F) "],["ebullition-estimates.html", "Chapter 7 Ebullition estimates", " Chapter 7 Ebullition estimates # load gas volumes and match traps with measured concentrations # ebullition_kriging &lt;- gas_vols %&gt;% # left_join(conc_match %&gt;% select(Trap, Collection.Date, period, corr_ch4), by = c(&quot;Trap&quot;, &quot;Collection.Date&quot;, &quot;period&quot;)) %&gt;% # mutate(row_id = row_number()) %&gt;% filter(!(row_id)%in% c(1201,1202, 1602,1603)) Deans 8/16/22 Ebullition Estimate # to run again # sim_num &lt;- 2 # n_num &lt;- 10 # # # create vector of ch4 concentrations # deans1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Deans1&quot;) %&gt;% # pull(corr_ch4) # # # # # define theoretical variogram # dean_16_var_eb &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 10) # # # define interpolation grid # dean_grid &lt;- st_as_stars(st_bbox(deans), dx = 1, dy = 1) # dean_grid &lt;- dean_grid[deans] # # deans_16_eb_results &lt;- NULL # deans_16_eb_results_summarized &lt;- NULL # # temp_df &lt;- NULL # # krige_par &lt;- function(b){ # # deans1_conc_vec &lt;- sample(deans1_conc, 200, replace=T) # # deans_16_eb_kr &lt;- deans_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans1&quot;) %&gt;% # mutate(ch4_rand = deans1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(deans_16_eb_kr$period) # var.lst &lt;- list() # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_16_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), dean_grid, model = dean_16_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- lapply(1:2, krige_par) # # deans_16_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(deans_16_eb_results,&quot;5-Results/1-kriged-estimates/deans_16_eb_results.csv&quot;) Deans 8/30/22 Ebullition Estimate # sim_num &lt;- 25 # n_num &lt;- 500 # # krige_par &lt;- function(b){ # deans2_conc_vec &lt;- sample(deans2_conc, 225, replace=T) # # deans_30_eb_kr &lt;- deans_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans2&quot;) %&gt;% # mutate(ch4_rand = deans2_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(deans_30_eb_kr$period) # var.lst &lt;- list() # # temp_df &lt;- NULL # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- deans_30_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), dean_grid, model = dean_30_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- mclapply(1:20, krige_par) # # deans_30_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(deans_30_eb_results,&quot;5-Results/1-kriged-estimates/deans_30_eb_results.csv&quot;) Catfish 9/06/22 Ebullition Estimate # catfish1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Catfish1&quot;) %&gt;% # pull(corr_ch4) # # # define theoretical variogram # catfish_06_var_eb &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 10) # # # define interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_06_eb_results &lt;- NULL # catfish_06_eb_results_summarized &lt;- NULL # # # # generate variogram based only on volume # # # # catfish_18_eb_kr &lt;- catfish_pts %&gt;% # # full_join(ebullition_kriging %&gt;% # # filter(Sampling == &quot;Catfish2&quot;), by = &quot;location&quot;) # # # # periods &lt;- unique(catfish_18_eb_kr$period) # # var.lst &lt;- list() # # # # # # for(i in 1:length(periods)){ # # var.lst$data[[i]] &lt;- catfish_18_eb_kr %&gt;% filter(period == periods[i]) # # # # # quantile-quantile normal score transform data # # var.lst$data[[i]]$vol_norm &lt;- qqnorm(var.lst$data[[i]]$gas_vol_corrected, plot.it = F)$x # # # # var.lst$var_df[[i]] &lt;- variogram(vol_norm~1, var.lst$data[[i]] %&gt;% filter(is.na(vol_norm) == F), cloud = T) # # # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # # pdf(&quot;5-Results/1-kriged-estimates/variograms_catfish_20220918_eb.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # # dev.off() # # sim_num &lt;- 25 # n_num &lt;- 500 # # krige_par &lt;- function(b){ # catfish1_conc_vec &lt;- sample(catfish1_conc, 225, replace=T) # # catfish_06_eb_kr &lt;- catfish_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish1&quot;) %&gt;% # mutate(ch4_rand = catfish1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(catfish_06_eb_kr$period) # var.lst &lt;- list() # # temp_df &lt;- NULL # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_06_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), catfish_grid, model = catfish_06_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- lapply(1:20, krige_par) # # catfish_06_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(catfish_06_eb_results,&quot;5-Results/1-kriged-estimates/catfish_06_eb_results.csv&quot;) Catfish 9/18/22 Ebullition Estimate # # create vector of ch4 concentrations # catfish2_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Catfish2&quot;) %&gt;% # pull(corr_ch4) # # # define theoretical variogram # catfish_18_var_eb &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 10) # # # define interpolation grid # catfish_grid &lt;- st_as_stars(st_bbox(catfish), dx = 1, dy = 1) # catfish_grid &lt;- catfish_grid[catfish] # # catfish_18_eb_results &lt;- NULL # catfish_18_eb_results_summarized &lt;- NULL # # # # generate variogram based only on volume # # # # catfish_18_eb_kr &lt;- catfish_pts %&gt;% # # full_join(ebullition_kriging %&gt;% # # filter(Sampling == &quot;Catfish2&quot;), by = &quot;location&quot;) # # # # periods &lt;- unique(catfish_18_eb_kr$period) # # var.lst &lt;- list() # # # # # # for(i in 1:length(periods)){ # # var.lst$data[[i]] &lt;- catfish_18_eb_kr %&gt;% filter(period == periods[i]) # # # # # quantile-quantile normal score transform data # # var.lst$data[[i]]$vol_norm &lt;- qqnorm(var.lst$data[[i]]$gas_vol_corrected, plot.it = F)$x # # # # var.lst$var_df[[i]] &lt;- variogram(vol_norm~1, var.lst$data[[i]] %&gt;% filter(is.na(vol_norm) == F), cloud = T) # # # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # # pdf(&quot;variograms_catfish_20220918_eb.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # # dev.off() # # sim_num &lt;- 25 # n_num &lt;- 500 # # krige_par &lt;- function(b){ # catfish2_conc_vec &lt;- sample(catfish2_conc, 225, replace=T) # # catfish_18_eb_kr &lt;- catfish_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish2&quot;) %&gt;% # mutate(ch4_rand = catfish2_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(catfish_18_eb_kr$period) # var.lst &lt;- list() # # temp_df &lt;- NULL # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- catfish_18_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), catfish_grid, model = catfish_18_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- lapply(1:20, krige_par) # # catfish_18_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(catfish_18_eb_results,&quot;5-Results/1-kriged-estimates/catfish_18_eb_results.csv&quot;) Pick 9/13/22 Ebullition Estimate # # create vector of ch4 concentrations # pick1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Pick1&quot;) %&gt;% # pull(corr_ch4) # # # define theoretical variogram # pick_13_var_eb &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 10) # # # define interpolation grid # pick_grid &lt;- st_as_stars(st_bbox(pick), dx = 1, dy = 1) # pick_grid &lt;- pick_grid[pick] # # pick_13_eb_results &lt;- NULL # pick_13_eb_results_summarized &lt;- NULL # # # generate variogram based only on volume # # # pick_13_eb_kr &lt;- pick_pts %&gt;% # # full_join(ebullition_kriging %&gt;% # # filter(Sampling == &quot;Pick1&quot;), by = &quot;location&quot;) # # # # periods &lt;- unique(pick_13_eb_kr$period) # # var.lst &lt;- list() # # # # # # for(i in 1:length(periods)){ # # var.lst$data[[i]] &lt;- pick_13_eb_kr %&gt;% filter(period == periods[i]) # # # # # quantile-quantile normal score transform data # # var.lst$data[[i]]$vol_norm &lt;- qqnorm(var.lst$data[[i]]$gas_vol_corrected, plot.it = F)$x # # # # var.lst$var_df[[i]] &lt;- variogram(vol_norm~1, var.lst$data[[i]] %&gt;% filter(is.na(vol_norm) == F), cloud = T) # # # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # # pdf(&quot;5-Results/1-kriged-estimates/variograms_pick_20220913_eb.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # # dev.off() # # sim_num &lt;- 25 # n_num &lt;- 500 # # krige_par &lt;- function(b){ # pick1_conc_vec &lt;- sample(pick1_conc, 224, replace=T) # # pick_13_eb_kr &lt;- pick_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Pick1&quot;) %&gt;% # mutate(ch4_rand = pick1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(pick_13_eb_kr$period) # var.lst &lt;- list() # # temp_df &lt;- NULL # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- pick_13_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), pick_grid, model = pick_13_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- lapply(1:20, krige_par) # # pick_13_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(pick_13_eb_results,&quot;5-Results/1-kriged-estimates/pick_13_eb_results.csv&quot;) Sister3 22 Ebullition Estimate # # create vector of ch4 concentrations # sister3_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Sister31&quot;) %&gt;% # pull(corr_ch4) # # # define theoretical variogram # sister3_22_var_eb &lt;- vgm(psill = 1, &quot;Sph&quot;, range = 6) # # # define interpolation grid # sister3_grid &lt;- st_as_stars(st_bbox(sister3), dx = 1, dy = 1) # sister3_grid &lt;- sister3_grid[sister3] # # sister3_22_eb_results &lt;- NULL # sister3_22_eb_results_summarized &lt;- NULL # # # generate variogram based only on volume # # # sister3_22_eb_kr &lt;- sister3_pts %&gt;% # # full_join(ebullition_kriging %&gt;% # # filter(Sampling == &quot;Sister31&quot;), by = &quot;location&quot;) # # # # periods &lt;- unique(sister3_22_eb_kr$period) # # var.lst &lt;- list() # # # # # # for(i in 1:length(periods)){ # # var.lst$data[[i]] &lt;- sister3_22_eb_kr %&gt;% filter(period == periods[i]) # # # # # quantile-quantile normal score transform data # # var.lst$data[[i]]$vol_norm &lt;- qqnorm(var.lst$data[[i]]$gas_vol_corrected, plot.it = F)$x # # # # var.lst$var_df[[i]] &lt;- variogram(vol_norm~1, var.lst$data[[i]] %&gt;% filter(is.na(vol_norm) == F), cloud = T) # # # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # } # # # # pdf(&quot;5-Results/1-kriged-estimates/variograms_sister3_20220822_eb.pdf&quot;, paper=&quot;a4&quot;, width=9, height=12) # # marrangeGrob(grobs=compact(var.lst$var_plot), nrow=4, ncol = 2) # # dev.off() # # sim_num &lt;- 25 # n_num &lt;- 500 # # krige_par &lt;- function(b){ # sister3_conc_vec &lt;- sample(sister3_conc, 223, replace=T) # # sister3_22_eb_kr &lt;- sister3_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Sister31&quot;) %&gt;% # mutate(ch4_rand = sister3_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # periods &lt;- unique(sister3_22_eb_kr$period) # var.lst &lt;- list() # # temp_df &lt;- NULL # # for(i in 1:length(periods)){ # var.lst$data[[i]] &lt;- sister3_22_eb_kr %&gt;% filter(period == periods[i]) # # # quantile-quantile normal score transform data # var.lst$data[[i]]$norm_eb &lt;- qqnorm(var.lst$data[[i]]$ch4_eb_g_m2_hr, plot.it = F)$x # # var.lst$nscore.tab[[i]] &lt;- nscore(var.lst$data[[i]]$ch4_eb_g_m2_hr) # # var.lst$var_df[[i]] &lt;- variogram(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), cloud = T) # # var.lst$var_plot[[i]] &lt;- ggplot(var.lst$var_df[[i]], aes(dist, gamma))+geom_point(size =2)+theme_bw()+labs(title = periods[i]) # # # var.lst$kriged[[i]] &lt;- krige(norm_eb~1, var.lst$data[[i]] %&gt;% filter(is.na(norm_eb) == F), sister3_grid, model = sister3_22_var_eb, nsim=sim_num, maxdist = Inf,nmin = 0,omax=Inf, beta = 0, nmax = n_num, debug.level = -1) # # above.max.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][(nrow(var.lst$nscore.tab[[i]])-1):nrow(var.lst$nscore.tab[[i]]),]) # above.max.func &lt;- function(x){ # coefficients(above.max.lm)[[1]] + (coefficients(above.max.lm)[[2]]*x) # } # below.min.lm &lt;- lm(x~nscore, data=var.lst$nscore.tab[[i]][1:2,]) # below.min.func &lt;- function(x){ # coefficients(below.min.lm)[[1]] + (coefficients(below.min.lm)[[2]]*x) # } # # interpolate &lt;- approxfun(x=var.lst$nscore.tab[[i]]$nscore, y=var.lst$nscore.tab[[i]]$x) # backtr &lt;- function(x){ # if(is.na(x)){ # return(NA) # } # if(x&gt;max(var.lst$nscore.tab[[i]]$nscore)){ # return(above.max.func(x)) # } # if(x&lt;min(var.lst$nscore.tab[[i]]$nscore)){ # return(below.min.func(x)) # } # else{ # return(interpolate(x)) # } # # } # # var.lst$kriged[[i]]$backtransformed &lt;- st_apply(var.lst$kriged[[i]][1], 1:3, backtr) # # sim_vec &lt;- c() # for(f in 1:sim_num){ # sim_vec &lt;- c(sum(var.lst$kriged[[i]][2,,,f]$backtransformed, na.rm = T), sim_vec) # } # # temp_df &lt;- bind_rows(temp_df, data.frame(site = &quot;Sister3&quot;, date = &quot;2022-08-22&quot;, period = i, gas = &quot;CH4&quot;, sum_flux = sim_vec)) # } # return(temp_df) # } # s_time &lt;- Sys.time() # temp_list &lt;- list() # temp_list &lt;- lapply(1:20, krige_par) # # sister3_22_eb_results &lt;- bind_rows(temp_list) # e_time &lt;- Sys.time() # print(&quot;total time:&quot;) # print(e_time-s_time) # # write.csv(sister3_22_eb_results,&quot;5-Results/1-kriged-estimates/sister3_22_eb_results.csv&quot;) "],["flux-summary-stats-prep.html", "Chapter 8 Flux summary stats prep", " Chapter 8 Flux summary stats prep Deans 8/16/22 # deans1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Deans1&quot;) %&gt;% # pull(corr_ch4) # # deans1_conc_vec &lt;- sample(deans1_conc, 200, replace=T) # # deans_16_eb_kr &lt;- deans_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans1&quot;) %&gt;% # mutate(ch4_rand = deans1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # deans_16_eb_results &lt;- read.csv(&quot;5-Results/1-kriged-estimates/deans_16_eb_results.csv&quot;) # deans_16_eb_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # temp &lt;- deans_16_eb_results %&gt;% filter(period == periods[i]) %&gt;% pull(sum_flux) # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-16&quot;, period = i, flux_2.5 = as.numeric(quantile(temp, 0.025)), flux_97.5 = as.numeric(quantile(temp, 0.975)), mean_flux = mean(temp)) # # deans_16_eb_results_summarized &lt;- bind_rows(deans_16_eb_results_summarized, temp_df) # } # # deans_16_eb_results_summarized &lt;- deans_16_eb_results_summarized %&gt;% mutate(period= periods[period])%&gt;% left_join(ebullition_kriging %&gt;% filter(Sampling == &quot;Deans1&quot;) %&gt;% group_by(period) %&gt;% summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) # # ggplot(deans_16_eb_results_summarized, aes(period, mean_flux))+ # geom_point()+ # geom_errorbar(aes(ymin = flux_2.5, ymax = flux_97.5))+ # ylab(&quot;total ebullition (g/hr)&quot;) # # # calculating by averaging instead of kriging # deans_16_eb_kr %&gt;% # mutate(eb_avg = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * mean(deans1_conc) * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)) %&gt;% # group_by(period) %&gt;% # summarize(average_eb = mean(eb_avg, na.rm=T)) %&gt;% # mutate(average_eb = average_eb * st_area(deans) %&gt;% as.numeric()) %&gt;% # left_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans1&quot;) %&gt;% # group_by(period) %&gt;% # summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) %&gt;% # mutate(flux_g = average_eb * avg_time)%&gt;% # summarize(sum_flux = sum(flux_g)) %&gt;% # mutate(sum_flux_g_m2_day = sum_flux/st_area(deans)) # # write.csv(deans_16_eb_results_summarized %&gt;% filter(period!=&quot;8~9&quot;), &quot;5-Results/1-kriged-estimates/deans_16_eb_results_summarized.csv&quot;) Deans 8/30/22 # deans_30_eb_results &lt;- read.csv(&quot;5-Results/1-kriged-estimates/deans_30_eb_results.csv&quot;) # deans_30_eb_results_summarized &lt;- NULL # # deans2_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Deans2&quot;) %&gt;% # pull(corr_ch4) # # deans2_conc_vec &lt;- sample(deans2_conc, 225, replace=T) # # deans_30_eb_kr &lt;- deans_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans2&quot;) %&gt;% # mutate(ch4_rand = deans2_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4))) # # for(i in 1:length(periods)){ # temp &lt;- deans_30_eb_results %&gt;% filter(period == i) %&gt;% pull(sum_flux) # # temp_df &lt;- data.frame(site = &quot;Deans&quot;, date = &quot;2022-08-30&quot;, period = i, flux_2.5 = as.numeric(quantile(temp, 0.025)), flux_97.5 = as.numeric(quantile(temp, 0.975)), mean_flux = mean(temp)) # # deans_30_eb_results_summarized &lt;- bind_rows(deans_30_eb_results_summarized, temp_df) # } # # deans_30_eb_results_summarized &lt;- deans_30_eb_results_summarized %&gt;% mutate(period= periods[period])%&gt;% left_join(ebullition_kriging %&gt;% filter(Sampling == &quot;Deans2&quot;) %&gt;% group_by(period) %&gt;% summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) # # ggplot(deans_30_eb_results_summarized, aes(period, mean_flux))+ # geom_point()+ # geom_errorbar(aes(ymin = flux_2.5, ymax = flux_97.5))+ # ylab(&quot;total ebullition (g/hr)&quot;) # # # calculating by averaging instead of kriging # deans_30_eb_kr %&gt;% # mutate(eb_avg = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * mean(deans2_conc) * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)) %&gt;% # group_by(period) %&gt;% # summarize(average_eb = mean(eb_avg, na.rm=T)) %&gt;% # mutate(average_eb = average_eb * st_area(deans) %&gt;% as.numeric()) %&gt;% # left_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Deans2&quot;) %&gt;% # group_by(period) %&gt;% # summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) %&gt;% # mutate(flux_g = average_eb * avg_time)%&gt;% # summarize(sum_flux = sum(flux_g)) %&gt;% # mutate(sum_flux_g_m2_day = sum_flux/st_area(deans)) # # write.csv(deans_30_eb_results_summarized, &quot;5-Results/1-kriged-estimates/deans_30_eb_results_summarized.csv&quot;) Catfish 9/6/22 # catfish_06_eb_results &lt;- read.csv(&quot;5-Results/1-kriged-estimates/catfish_06_eb_results.csv&quot;) # catfish_06_eb_results_summarized &lt;- NULL # catfish1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Catfish1&quot;) %&gt;% # pull(corr_ch4) # # catfish1_conc_vec &lt;- sample(catfish1_conc, 225, replace=T) # # catfish_06_eb_kr &lt;- catfish_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish1&quot;) %&gt;% # mutate(ch4_rand = catfish1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4))) # # # for(i in 1:length(periods)){ # temp &lt;- catfish_06_eb_results %&gt;% filter(period == i) %&gt;% pull(sum_flux) # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-06&quot;, period = i, flux_2.5 = as.numeric(quantile(temp, 0.025)), flux_97.5 = as.numeric(quantile(temp, 0.975)), mean_flux = mean(temp)) # # catfish_06_eb_results_summarized &lt;- bind_rows(catfish_06_eb_results_summarized, temp_df) # } # # catfish_06_eb_results_summarized &lt;- catfish_06_eb_results_summarized %&gt;% mutate(period= periods[period])%&gt;% left_join(ebullition_kriging %&gt;% filter(Sampling == &quot;Catfish1&quot;) %&gt;% group_by(period) %&gt;% summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) # # ggplot(catfish_06_eb_results_summarized, aes(period, mean_flux))+ # geom_point()+ # geom_errorbar(aes(ymin = flux_2.5, ymax = flux_97.5))+ # ylab(&quot;total ebullition (g/hr)&quot;) # # # calculating by averaging instead of kriging # catfish_06_eb_kr %&gt;% # mutate(eb_avg = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * mean(catfish1_conc) * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)) %&gt;% # group_by(period) %&gt;% # summarize(average_eb = mean(eb_avg, na.rm=T)) %&gt;% # mutate(average_eb = average_eb * st_area(catfish) %&gt;% as.numeric()) %&gt;% # left_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish1&quot;) %&gt;% # group_by(period) %&gt;% # summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) %&gt;% # mutate(flux_g = average_eb * avg_time)%&gt;% # summarize(sum_flux = sum(flux_g)) %&gt;% # mutate(sum_flux_g_m2_day = sum_flux/st_area(catfish)) # # write.csv(catfish_06_eb_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_06_eb_results_summarized.csv&quot;) Catfish 9/18/22 # catfish2_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Catfish2&quot;) %&gt;% # pull(corr_ch4) # # catfish2_conc_vec &lt;- sample(catfish2_conc, 225, replace=T) # # catfish_18_eb_kr &lt;- catfish_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish2&quot;) %&gt;% # mutate(ch4_rand = catfish2_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # catfish_18_eb_results &lt;- read.csv(&quot;5-Results/1-kriged-estimates/catfish_18_eb_results.csv&quot;) # catfish_18_eb_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # temp &lt;- catfish_18_eb_results %&gt;% filter(period == i) %&gt;% pull(sum_flux) # # temp_df &lt;- data.frame(site = &quot;Catfish&quot;, date = &quot;2022-09-18&quot;, period = i, flux_2.5 = as.numeric(quantile(temp, 0.025)), flux_97.5 = as.numeric(quantile(temp, 0.975)), mean_flux = mean(temp)) # # catfish_18_eb_results_summarized &lt;- bind_rows(catfish_18_eb_results_summarized, temp_df) # } # # catfish_18_eb_results_summarized &lt;- catfish_18_eb_results_summarized %&gt;% mutate(period= periods[period])%&gt;% left_join(ebullition_kriging %&gt;% filter(Sampling == &quot;Catfish2&quot;) %&gt;% group_by(period) %&gt;% summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) # # ggplot(catfish_18_eb_results_summarized, aes(period, mean_flux))+ # geom_point()+ # geom_errorbar(aes(ymin = flux_2.5, ymax = flux_97.5))+ # ylab(&quot;total ebullition (g/hr)&quot;) # # # calculating by averaging instead of kriging # catfish_18_eb_kr %&gt;% # mutate(eb_avg = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * mean(catfish2_conc) * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)) %&gt;% # group_by(period) %&gt;% # summarize(average_eb = mean(eb_avg, na.rm=T)) %&gt;% # mutate(average_eb = average_eb * st_area(catfish) %&gt;% as.numeric()) %&gt;% # left_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Catfish2&quot;) %&gt;% # group_by(period) %&gt;% # summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) %&gt;% # mutate(flux_g = average_eb * avg_time)%&gt;% # summarize(sum_flux = sum(flux_g)) %&gt;% # mutate(sum_flux_g_m2_day = sum_flux/st_area(catfish)) # # write.csv(catfish_18_eb_results_summarized, &quot;5-Results/1-kriged-estimates/catfish_18_eb_results_summarized.csv&quot;) Sister 3 8/22/22 Pick 9/13/22 # pick1_conc &lt;- read.csv(&quot;2-Clean Data/ebullition_concentrations.csv&quot;)%&gt;% # mutate(corr_ch4 = case_when( # Sample.Vol == 0.1 ~ Undiluted.CH4.conc.ppm * 0.473176497, # Sample.Vol == 0.2 ~ Undiluted.CH4.conc.ppm, # Sample.Vol == 1 ~ Undiluted.CH4.conc.ppm)) %&gt;% # filter(is.na(Data.Flag)==T) %&gt;% # left_join(samplings, by = &quot;Collection.Date&quot;) %&gt;% # filter(Sampling == &quot;Pick1&quot;) %&gt;% # pull(corr_ch4) # # pick1_conc_vec &lt;- sample(pick1_conc, 224, replace=T) # # pick1_13_eb_kr &lt;- pick_pts %&gt;% # full_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Pick1&quot;) %&gt;% # mutate(ch4_rand = pick1_conc_vec, # ch4_conc = if_else(is.na(corr_ch4), ch4_rand, corr_ch4)) %&gt;% # mutate(ch4_eb_g_m2_hr = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * ch4_conc * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)), by = &quot;location&quot;) # # pick_13_eb_results &lt;- read.csv(&quot;5-Results/1-kriged-estimates/pick_13_eb_results.csv&quot;) # pick_13_eb_results_summarized &lt;- NULL # # for(i in 1:length(periods)){ # temp &lt;- pick_13_eb_results %&gt;% filter(period == i) %&gt;% pull(sum_flux) # # temp_df &lt;- data.frame(site = &quot;Pick&quot;, date = &quot;2022-09-13&quot;, period = i, flux_2.5 = as.numeric(quantile(temp, 0.025)), flux_97.5 = as.numeric(quantile(temp, 0.975)), mean_flux = mean(temp)) # # pick_13_eb_results_summarized &lt;- bind_rows(pick_13_eb_results_summarized, temp_df) # } # # pick_13_eb_results_summarized &lt;- pick_13_eb_results_summarized %&gt;% mutate(period= periods[period])%&gt;% left_join(ebullition_kriging %&gt;% filter(Sampling == &quot;Pick1&quot;) %&gt;% group_by(period) %&gt;% summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) # # ggplot(pick_13_eb_results_summarized, aes(period, mean_flux))+ # geom_point()+ # geom_errorbar(aes(ymin = flux_2.5, ymax = flux_97.5))+ # ylab(&quot;total ebullition (g/hr)&quot;) # # # calculating by averaging instead of kriging # pick1_13_eb_kr %&gt;% # mutate(eb_avg = gas_vol_corrected * (1/area) * (1/time_hr)* (1/10^6) * mean(pick1_conc) * (1/10^3) * 16.04 * (1/0.0821)* (1/293.15)) %&gt;% # group_by(period) %&gt;% # summarize(average_eb = mean(eb_avg, na.rm=T)) %&gt;% # mutate(average_eb = average_eb * st_area(pick) %&gt;% as.numeric()) %&gt;% # left_join(ebullition_kriging %&gt;% # filter(Sampling == &quot;Pick1&quot;) %&gt;% # group_by(period) %&gt;% # summarize(avg_time = mean(time_hr, na.rm = T)), by = &quot;period&quot;) %&gt;% # mutate(flux_g = average_eb * avg_time)%&gt;% # summarize(sum_flux = sum(flux_g)) %&gt;% # mutate(sum_flux_g_m2_day = sum_flux/st_area(pick)) # # write.csv(pick_13_eb_results_summarized, &quot;5-Results/1-kriged-estimates/pick_13_eb_results_summarized.csv&quot;) ## `summarise()` has grouped output by &#39;sampling&#39;, &#39;area&#39;, &#39;pathway&#39;. You can override using the `.groups` ## argument. ## # A tibble: 6 × 2 ## sampling sum_co2_eq ## &lt;chr&gt; &lt;dbl&gt; ## 1 Catfish1 11836. ## 2 Catfish2 6571. ## 3 Deans1 3913405. ## 4 Deans2 9929. ## 5 Pick1 137205. ## 6 Sister31 2471. "],["total-flux-estimates.html", "Chapter 9 Total flux estimates 9.1 Summary flux table masses and rates 9.2 Summary Table CO2-eq 9.3 Diel Diffusive CH4 9.4 Diel Diffusive CO2 9.5 Diel ebullition", " Chapter 9 Total flux estimates 9.1 Summary flux table masses and rates ## site date pathway gas flux_mean_g_m2_day flux_2.5_g_m2_day flux_97.5_g_m2_day ## 1 Catfish 09/06/22 diffusion CH4 0.011693273 0.007541918 0.016375039 ## 2 Catfish 09/06/22 diffusion CO2 3.136155443 2.731721856 3.625338182 ## 3 Catfish 09/06/22 ebullition CH4 0.122323616 0.068244686 0.203545378 ## 4 Catfish 09/18/22 diffusion CH4 0.011220649 0.006845575 0.017339649 ## 5 Catfish 09/18/22 diffusion CO2 2.424722663 2.076588119 2.831110621 ## 6 Catfish 09/18/22 ebullition CH4 0.037861595 0.021012231 0.065691537 ## 7 Deans 08/16/22 diffusion CH4 0.012068835 0.009006769 0.015117749 ## 8 Deans 08/16/22 diffusion CO2 3.219980439 2.756971958 3.750607506 ## 9 Deans 08/16/22 ebullition CH4 0.023236227 0.006520052 0.048373789 ## 10 Deans 08/30/22 diffusion CH4 0.006365426 0.005215432 0.007714407 ## 11 Deans 08/30/22 diffusion CO2 1.189342033 1.023019529 1.365895730 ## 12 Deans 08/30/22 ebullition CH4 0.038035817 0.018929755 0.061608210 ## 13 Pick 09/13/22 diffusion CH4 0.294927413 0.247766512 0.347791996 ## 14 Pick 09/13/22 diffusion CO2 3.621730097 2.941075197 4.333192201 ## 15 Pick 09/13/22 ebullition CH4 0.229431787 0.153552271 0.324385669 ## 16 Sister3 08/22/22 diffusion CH4 0.011444090 0.009795347 0.013339306 ## 17 Sister3 08/22/22 diffusion CO2 -0.074443000 -0.126191223 -0.022126998 ## 18 Sister3 08/22/22 ebullition CH4 0.069238080 0.049814377 0.091469004 ## flux_mean_g_day_co2_eq flux_2.5_g_day_co2_eq flux_97.5_g_day_co2_eq ## 1 553.21830 356.8143 774.71645 ## 2 5495.33597 4786.6662 6352.50761 ## 3 5787.23001 3228.7117 9629.89779 ## 4 530.85806 323.8697 820.35295 ## 5 4248.72616 3638.7066 4960.82044 ## 6 1791.26294 994.1058 3107.92018 ## 7 1354.79434 1011.0603 1697.05197 ## 8 13387.43837 11462.4275 15593.58133 ## 9 2608.39660 731.9124 5430.22871 ## 10 714.55472 585.4614 865.98535 ## 11 4944.82606 4253.3211 5678.86832 ## 12 4269.73344 2124.9710 6915.86655 ## 13 61451.27653 51624.7989 72466.17698 ## 14 27949.11656 22696.4603 33439.51390 ## 15 47804.56328 31994.2557 67589.21872 ## 16 362.95554 310.6648 423.06335 ## 17 -87.44446 -148.2305 -25.99147 ## 18 2195.92345 1579.8901 2900.98930 ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 3.14 0.0117 0.122 ## 2 Catfish 09/18/22 2.42 0.0112 0.0379 ## 3 Deans 08/16/22 3.22 0.0121 0.0232 ## 4 Deans 08/30/22 1.19 0.0064 0.038 ## 5 Pick 09/13/22 3.62 0.295 0.229 ## 6 Sister3 08/22/22 -0.0744 0.0114 0.0692 ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 2.73 0.0075 0.0682 ## 2 Catfish 09/18/22 2.08 0.0068 0.021 ## 3 Deans 08/16/22 2.76 0.009 0.0065 ## 4 Deans 08/30/22 1.02 0.0052 0.0189 ## 5 Pick 09/13/22 2.94 0.248 0.154 ## 6 Sister3 08/22/22 -0.126 0.0098 0.0498 ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 3.63 0.0164 0.204 ## 2 Catfish 09/18/22 2.83 0.0173 0.0657 ## 3 Deans 08/16/22 3.75 0.0151 0.0484 ## 4 Deans 08/30/22 1.37 0.0077 0.0616 ## 5 Pick 09/13/22 4.33 0.348 0.324 ## 6 Sister3 08/22/22 -0.0221 0.0133 0.0915 9.2 Summary Table CO2-eq ## # A tibble: 6 × 9 ## site date diffusion_CH4 diffusion_CO2 ebullition_CH4 total prop_co2 prop_ch4_diff prop_ch4_eb ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 0.316 3.14 3.30 6.75 46.4 4.67 48.9 ## 2 Catfish 09/18/22 0.303 2.42 1.02 3.75 64.7 8.08 27.3 ## 3 Deans 08/16/22 0.326 3.22 0.627 4.17 77.2 7.81 15.0 ## 4 Deans 08/30/22 0.172 1.19 1.03 2.39 49.8 7.20 43.0 ## 5 Pick 09/13/22 7.96 3.62 6.19 17.8 20.4 44.8 34.8 ## 6 Sister3 08/22/22 0.309 -0.0744 1.87 2.10 -3.54 14.7 88.9 9.2.1 Pathway ## null device ## 1 9.3 Diel Diffusive CH4 Log-transformed axis ## Warning in self$trans$transform(x): NaNs produced ## Warning: Transformation introduced infinite values in continuous y-axis Untransformed axis Untransformed rate Untransformed without Picks 9.4 Diel Diffusive CO2 Untransformed Untransformed without Picks 9.5 Diel ebullition Untransformed Untransformed rate Untransformed without Picks png(filename = &quot;4-Figures/periods.png&quot;, width = 7.5, height = 11.5, units = &quot;in&quot;, res = 300) plot_grid(co2_diel, ch4_diel, eb_diel, ncol = 1, labels = &quot;AUTO&quot;, label_size = 18, vjust = 1.3) dev.off() ## png ## 2 "],["sunny-cloudy-analysis.html", "Chapter 10 Sunny Cloudy Analysis", " Chapter 10 Sunny Cloudy Analysis "],["degassing-analysis.html", "Chapter 11 Degassing analysis", " Chapter 11 Degassing analysis pick_conc &lt;- 98.66104183 -0.36507263 pick_q_0913 &lt;- 4/c(270, 214, 245) degas_ch4 &lt;-pick_conc * mean(pick_q_0913) * 86400 * 1e-6 *16.04 *(1/as.numeric(st_area(pick))) degas_co2_eq &lt;- degas_ch4 *27 degas_ch4 ## [1] 0.0002932223 degas_co2_eq ## [1] 0.007917002 "],["alternative-sampling-scheme-simulations.html", "Chapter 12 Alternative sampling scheme simulations", " Chapter 12 Alternative sampling scheme simulations summary_pathways &lt;- all_fluxes_pathways %&gt;% select(site, date, pathway, gas, flux_mean_g_m2_day, flux_2.5_g_m2_day, flux_97.5_g_m2_day) %&gt;% mutate(flux_round = round(flux_mean_g_m2_day, digits = 4), flux_round_2.5 = round(flux_2.5_g_m2_day, digits = 4), flux_round_97.5 = round(flux_97.5_g_m2_day, digits = 4)) %&gt;% select(-flux_mean_g_m2_day, -flux_2.5_g_m2_day, -flux_97.5_g_m2_day) %&gt;% pivot_wider(names_from = c(pathway, gas), values_from = c(flux_round, flux_round_2.5, flux_round_97.5)) alt_sim_space &lt;- function(data, times, locations){ temp &lt;- data %&gt;% st_drop_geometry() %&gt;% filter(location %in% locations) %&gt;% mutate(period = as.character(trip)) %&gt;% left_join(times, by = &quot;period&quot;) %&gt;% select(location, period, flux_ch4_g_hr, flux_co2_g_hr, avg_time) %&gt;% mutate(flux_ch4_g_m2 = flux_ch4_g_hr * avg_time, flux_co2_g_m2 = flux_co2_g_hr * avg_time) %&gt;% group_by(location) %&gt;% summarize(flux_ch4_g_m2_day = sum(flux_ch4_g_m2), flux_co2_g_m2_day = sum(flux_co2_g_m2)) %&gt;% ungroup() %&gt;% summarize(flux_ch4_g_m2_day = mean(flux_ch4_g_m2_day), flux_co2_g_m2_day = mean(flux_co2_g_m2_day)) %&gt;% rename(&quot;alt_space_diffusion_co2&quot; = &quot;flux_co2_g_m2_day&quot;, &quot;alt_space_diffusion_ch4&quot; = &quot;flux_ch4_g_m2_day&quot;) return(temp) } # how off you would be if you sampled in the middle but did sample at many times middle_sims &lt;- list( alt_sim_space(deans_pts_16, deans_16_time, &quot;D3B&quot;) %&gt;% mutate(site = &quot;Deans&quot;, date = &quot;08/16/22&quot;), alt_sim_space(deans_pts_30, deans_30_time, &quot;D3B&quot;) %&gt;% mutate(site = &quot;Deans&quot;, date = &quot;08/30/22&quot;), alt_sim_space(catfish_pts_06, catfish_06_time, &quot;C2D&quot;) %&gt;% mutate(site = &quot;Catfish&quot;, date = &quot;09/06/22&quot;), alt_sim_space(catfish_pts_18, catfish_18_time, &quot;C2D&quot;) %&gt;% mutate(site = &quot;Catfish&quot;, date = &quot;09/18/22&quot;), alt_sim_space(pick_pts_13, pick_13_time, &quot;P3E&quot;) %&gt;% mutate(site = &quot;Pick&quot;, date = &quot;09/13/22&quot;), alt_sim_space(sister3_pts_22, sister3_22_time, &quot;S2C&quot;) %&gt;% mutate(site = &quot;Sister3&quot;, date = &quot;08/22/22&quot;) ) # how off you would be if you sampled everywhere but only at 10 AM alt_sim_time &lt;- function(data, trips){ data %&gt;% st_drop_geometry() %&gt;% filter(trip %in% trips) %&gt;% mutate(period = as.character(trip)) %&gt;% select(period, flux_ch4_g_hr, flux_co2_g_hr) %&gt;% mutate(flux_ch4_g_m2 = flux_ch4_g_hr * 24, flux_co2_g_m2 = flux_co2_g_hr * 24) %&gt;% summarize(flux_ch4_g_m2_day = mean(flux_ch4_g_m2), flux_co2_g_m2_day = mean(flux_co2_g_m2)) %&gt;% rename(&quot;alt_time_diffusion_co2&quot; = &quot;flux_co2_g_m2_day&quot;, &quot;alt_time_diffusion_ch4&quot; = &quot;flux_ch4_g_m2_day&quot;) } time_sims &lt;- list( alt_sim_time(deans_pts_16, &quot;1&quot;) %&gt;% mutate(site = &quot;Deans&quot;, date = &quot;08/16/22&quot;), alt_sim_time(deans_pts_30, &quot;1&quot;) %&gt;% mutate(site = &quot;Deans&quot;, date = &quot;08/30/22&quot;), alt_sim_time(catfish_pts_06, &quot;1&quot;) %&gt;% mutate(site = &quot;Catfish&quot;, date = &quot;09/06/22&quot;), alt_sim_time(catfish_pts_18, &quot;1&quot;) %&gt;% mutate(site = &quot;Catfish&quot;, date = &quot;09/18/22&quot;), alt_sim_time(pick_pts_13, &quot;1&quot;) %&gt;% mutate(site = &quot;Pick&quot;, date = &quot;09/13/22&quot;), alt_sim_time(sister3_pts_22, &quot;1&quot;) %&gt;% mutate(site = &quot;Sister3&quot;, date = &quot;08/22/22&quot;) ) alt_sims &lt;- bind_rows(middle_sims) %&gt;% left_join(summary_pathways, by = c(&quot;site&quot;, &quot;date&quot;)) %&gt;% left_join(bind_rows(time_sims), by = c(&quot;site&quot;, &quot;date&quot;)) %&gt;% mutate(sampling = case_when( date == &quot;08/16/22&quot; ~ &quot;Deans 16 Aug&quot;, date == &quot;08/30/22&quot; ~ &quot;Deans 30 Aug&quot;, date == &quot;09/06/22&quot; ~ &quot;Catfish 06 Sept&quot;, date == &quot;09/18/22&quot; ~ &quot;Catfish 18 Sept&quot;, date == &quot;09/13/22&quot; ~ &quot;Blue Herron 13 Sept&quot;, date == &quot;08/22/22&quot; ~ &quot;Sister 22 Aug&quot;, )) ggplot(alt_sims, aes(sampling, flux_round_diffusion_CO2)) + geom_point(size = 2) + geom_errorbar(aes(ymin = flux_round_2.5_diffusion_CO2, ymax = flux_round_97.5_diffusion_CO2)) + geom_point(aes(y = alt_space_diffusion_co2), size = 2, shape = 2, stroke = 1 , color = &quot;red&quot;) + geom_point(aes(y = alt_time_diffusion_co2), size = 2, shape = 8, stroke = 1, color = &quot;blue&quot;)+ coord_flip() ggplot(alt_sims %&gt;% filter(site != &quot;Pick&quot;), aes(sampling, flux_round_diffusion_CH4)) + geom_point(size = 2) + geom_errorbar(aes(ymin = flux_round_2.5_diffusion_CH4, ymax = flux_round_97.5_diffusion_CH4)) + geom_point(aes(y = alt_space_diffusion_ch4), size = 2, shape = 2, stroke = 1 , color = &quot;red&quot;) + geom_point(aes(y = alt_time_diffusion_ch4), size = 2, shape = 8, stroke = 1, color = &quot;blue&quot;)+ coord_flip() # this analysis is sort of showing two things, effect of kriging procedure and sampling intensity time_period_sim &lt;- data.frame() samplings &lt;- list(deans_pts_16, deans_pts_30, catfish_pts_06, catfish_pts_18, pick_pts_13, sister3_pts_22) site_vec &lt;- c(&quot;Deans&quot;, &quot;Deans&quot;, &quot;Catfish&quot;, &quot;Catfish&quot;, &quot;Pick&quot;, &quot;Sister&quot;) date_vec &lt;- c(&quot;16 Aug&quot;, &quot;30 Aug&quot;, &quot;06 Sept&quot;, &quot;18 Sept&quot;, &quot;13 Sept&quot;, &quot;22 Aug&quot;) for(j in 1:length(samplings)){ for(i in 1:7){ for(f in 1:100){ tp &lt;- sample(1:8,i,replace = FALSE) temp &lt;- alt_sim_time(samplings[j][[1]], tp) %&gt;% mutate(site = site_vec[j], date = date_vec[j], np = length(tp)) time_period_sim &lt;- bind_rows(time_period_sim, temp) } } } time_period_sim %&gt;% left_join(summary_pathways %&gt;% mutate(date = case_when( date == &quot;09/06/22&quot; ~ &quot;06 Sept&quot;, date == &quot;09/18/22&quot; ~ &quot;18 Sept&quot;, date == &quot;08/16/22&quot; ~ &quot;16 Aug&quot;, date == &quot;08/30/22&quot; ~ &quot;30 Aug&quot;, date == &quot;09/13/22&quot; ~ &quot;13 Sept&quot;, date == &quot;08/22/22&quot; ~ &quot;22 Aug&quot; ), site = if_else(site == &quot;Sister3&quot;, &quot;Sister&quot;, site)), by = c(&quot;site&quot;,&quot;date&quot;)) ## alt_time_diffusion_ch4 alt_time_diffusion_co2 site date np flux_round_diffusion_CH4 ## 1 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 2 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 3 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 4 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 5 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 6 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 7 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 8 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 9 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 10 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 11 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 12 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 13 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 14 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 15 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 16 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 17 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 18 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 19 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 20 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 21 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 22 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 23 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 24 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 25 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 26 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 27 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 28 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 29 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 30 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 31 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 32 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 33 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 34 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 35 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 36 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 37 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 38 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 39 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 40 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 41 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 42 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 43 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 44 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 45 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 46 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 47 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 48 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 49 0.010627335 2.150134 Deans 16 Aug 1 0.0121 ## 50 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 51 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 52 0.008806592 2.682158 Deans 16 Aug 1 0.0121 ## 53 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 54 0.010627335 2.150134 Deans 16 Aug 1 0.0121 ## 55 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 56 0.011272003 4.024277 Deans 16 Aug 1 0.0121 ## 57 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 58 0.010627335 2.150134 Deans 16 Aug 1 0.0121 ## 59 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 60 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 61 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 62 0.011350432 2.371313 Deans 16 Aug 1 0.0121 ## 63 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 64 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## 65 0.010813384 3.099372 Deans 16 Aug 1 0.0121 ## 66 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 67 0.010627335 2.150134 Deans 16 Aug 1 0.0121 ## 68 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 69 0.012894201 3.986360 Deans 16 Aug 1 0.0121 ## 70 0.015853711 4.124948 Deans 16 Aug 1 0.0121 ## 71 0.011988622 2.953098 Deans 16 Aug 1 0.0121 ## flux_round_diffusion_CO2 flux_round_ebullition_CH4 flux_round_2.5_diffusion_CH4 ## 1 3.22 0.0232 0.009 ## 2 3.22 0.0232 0.009 ## 3 3.22 0.0232 0.009 ## 4 3.22 0.0232 0.009 ## 5 3.22 0.0232 0.009 ## 6 3.22 0.0232 0.009 ## 7 3.22 0.0232 0.009 ## 8 3.22 0.0232 0.009 ## 9 3.22 0.0232 0.009 ## 10 3.22 0.0232 0.009 ## 11 3.22 0.0232 0.009 ## 12 3.22 0.0232 0.009 ## 13 3.22 0.0232 0.009 ## 14 3.22 0.0232 0.009 ## 15 3.22 0.0232 0.009 ## 16 3.22 0.0232 0.009 ## 17 3.22 0.0232 0.009 ## 18 3.22 0.0232 0.009 ## 19 3.22 0.0232 0.009 ## 20 3.22 0.0232 0.009 ## 21 3.22 0.0232 0.009 ## 22 3.22 0.0232 0.009 ## 23 3.22 0.0232 0.009 ## 24 3.22 0.0232 0.009 ## 25 3.22 0.0232 0.009 ## 26 3.22 0.0232 0.009 ## 27 3.22 0.0232 0.009 ## 28 3.22 0.0232 0.009 ## 29 3.22 0.0232 0.009 ## 30 3.22 0.0232 0.009 ## 31 3.22 0.0232 0.009 ## 32 3.22 0.0232 0.009 ## 33 3.22 0.0232 0.009 ## 34 3.22 0.0232 0.009 ## 35 3.22 0.0232 0.009 ## 36 3.22 0.0232 0.009 ## 37 3.22 0.0232 0.009 ## 38 3.22 0.0232 0.009 ## 39 3.22 0.0232 0.009 ## 40 3.22 0.0232 0.009 ## 41 3.22 0.0232 0.009 ## 42 3.22 0.0232 0.009 ## 43 3.22 0.0232 0.009 ## 44 3.22 0.0232 0.009 ## 45 3.22 0.0232 0.009 ## 46 3.22 0.0232 0.009 ## 47 3.22 0.0232 0.009 ## 48 3.22 0.0232 0.009 ## 49 3.22 0.0232 0.009 ## 50 3.22 0.0232 0.009 ## 51 3.22 0.0232 0.009 ## 52 3.22 0.0232 0.009 ## 53 3.22 0.0232 0.009 ## 54 3.22 0.0232 0.009 ## 55 3.22 0.0232 0.009 ## 56 3.22 0.0232 0.009 ## 57 3.22 0.0232 0.009 ## 58 3.22 0.0232 0.009 ## 59 3.22 0.0232 0.009 ## 60 3.22 0.0232 0.009 ## 61 3.22 0.0232 0.009 ## 62 3.22 0.0232 0.009 ## 63 3.22 0.0232 0.009 ## 64 3.22 0.0232 0.009 ## 65 3.22 0.0232 0.009 ## 66 3.22 0.0232 0.009 ## 67 3.22 0.0232 0.009 ## 68 3.22 0.0232 0.009 ## 69 3.22 0.0232 0.009 ## 70 3.22 0.0232 0.009 ## 71 3.22 0.0232 0.009 ## flux_round_2.5_diffusion_CO2 flux_round_2.5_ebullition_CH4 flux_round_97.5_diffusion_CH4 ## 1 2.757 0.0065 0.0151 ## 2 2.757 0.0065 0.0151 ## 3 2.757 0.0065 0.0151 ## 4 2.757 0.0065 0.0151 ## 5 2.757 0.0065 0.0151 ## 6 2.757 0.0065 0.0151 ## 7 2.757 0.0065 0.0151 ## 8 2.757 0.0065 0.0151 ## 9 2.757 0.0065 0.0151 ## 10 2.757 0.0065 0.0151 ## 11 2.757 0.0065 0.0151 ## 12 2.757 0.0065 0.0151 ## 13 2.757 0.0065 0.0151 ## 14 2.757 0.0065 0.0151 ## 15 2.757 0.0065 0.0151 ## 16 2.757 0.0065 0.0151 ## 17 2.757 0.0065 0.0151 ## 18 2.757 0.0065 0.0151 ## 19 2.757 0.0065 0.0151 ## 20 2.757 0.0065 0.0151 ## 21 2.757 0.0065 0.0151 ## 22 2.757 0.0065 0.0151 ## 23 2.757 0.0065 0.0151 ## 24 2.757 0.0065 0.0151 ## 25 2.757 0.0065 0.0151 ## 26 2.757 0.0065 0.0151 ## 27 2.757 0.0065 0.0151 ## 28 2.757 0.0065 0.0151 ## 29 2.757 0.0065 0.0151 ## 30 2.757 0.0065 0.0151 ## 31 2.757 0.0065 0.0151 ## 32 2.757 0.0065 0.0151 ## 33 2.757 0.0065 0.0151 ## 34 2.757 0.0065 0.0151 ## 35 2.757 0.0065 0.0151 ## 36 2.757 0.0065 0.0151 ## 37 2.757 0.0065 0.0151 ## 38 2.757 0.0065 0.0151 ## 39 2.757 0.0065 0.0151 ## 40 2.757 0.0065 0.0151 ## 41 2.757 0.0065 0.0151 ## 42 2.757 0.0065 0.0151 ## 43 2.757 0.0065 0.0151 ## 44 2.757 0.0065 0.0151 ## 45 2.757 0.0065 0.0151 ## 46 2.757 0.0065 0.0151 ## 47 2.757 0.0065 0.0151 ## 48 2.757 0.0065 0.0151 ## 49 2.757 0.0065 0.0151 ## 50 2.757 0.0065 0.0151 ## 51 2.757 0.0065 0.0151 ## 52 2.757 0.0065 0.0151 ## 53 2.757 0.0065 0.0151 ## 54 2.757 0.0065 0.0151 ## 55 2.757 0.0065 0.0151 ## 56 2.757 0.0065 0.0151 ## 57 2.757 0.0065 0.0151 ## 58 2.757 0.0065 0.0151 ## 59 2.757 0.0065 0.0151 ## 60 2.757 0.0065 0.0151 ## 61 2.757 0.0065 0.0151 ## 62 2.757 0.0065 0.0151 ## 63 2.757 0.0065 0.0151 ## 64 2.757 0.0065 0.0151 ## 65 2.757 0.0065 0.0151 ## 66 2.757 0.0065 0.0151 ## 67 2.757 0.0065 0.0151 ## 68 2.757 0.0065 0.0151 ## 69 2.757 0.0065 0.0151 ## 70 2.757 0.0065 0.0151 ## 71 2.757 0.0065 0.0151 ## flux_round_97.5_diffusion_CO2 flux_round_97.5_ebullition_CH4 ## 1 3.7506 0.0484 ## 2 3.7506 0.0484 ## 3 3.7506 0.0484 ## 4 3.7506 0.0484 ## 5 3.7506 0.0484 ## 6 3.7506 0.0484 ## 7 3.7506 0.0484 ## 8 3.7506 0.0484 ## 9 3.7506 0.0484 ## 10 3.7506 0.0484 ## 11 3.7506 0.0484 ## 12 3.7506 0.0484 ## 13 3.7506 0.0484 ## 14 3.7506 0.0484 ## 15 3.7506 0.0484 ## 16 3.7506 0.0484 ## 17 3.7506 0.0484 ## 18 3.7506 0.0484 ## 19 3.7506 0.0484 ## 20 3.7506 0.0484 ## 21 3.7506 0.0484 ## 22 3.7506 0.0484 ## 23 3.7506 0.0484 ## 24 3.7506 0.0484 ## 25 3.7506 0.0484 ## 26 3.7506 0.0484 ## 27 3.7506 0.0484 ## 28 3.7506 0.0484 ## 29 3.7506 0.0484 ## 30 3.7506 0.0484 ## 31 3.7506 0.0484 ## 32 3.7506 0.0484 ## 33 3.7506 0.0484 ## 34 3.7506 0.0484 ## 35 3.7506 0.0484 ## 36 3.7506 0.0484 ## 37 3.7506 0.0484 ## 38 3.7506 0.0484 ## 39 3.7506 0.0484 ## 40 3.7506 0.0484 ## 41 3.7506 0.0484 ## 42 3.7506 0.0484 ## 43 3.7506 0.0484 ## 44 3.7506 0.0484 ## 45 3.7506 0.0484 ## 46 3.7506 0.0484 ## 47 3.7506 0.0484 ## 48 3.7506 0.0484 ## 49 3.7506 0.0484 ## 50 3.7506 0.0484 ## 51 3.7506 0.0484 ## 52 3.7506 0.0484 ## 53 3.7506 0.0484 ## 54 3.7506 0.0484 ## 55 3.7506 0.0484 ## 56 3.7506 0.0484 ## 57 3.7506 0.0484 ## 58 3.7506 0.0484 ## 59 3.7506 0.0484 ## 60 3.7506 0.0484 ## 61 3.7506 0.0484 ## 62 3.7506 0.0484 ## 63 3.7506 0.0484 ## 64 3.7506 0.0484 ## 65 3.7506 0.0484 ## 66 3.7506 0.0484 ## 67 3.7506 0.0484 ## 68 3.7506 0.0484 ## 69 3.7506 0.0484 ## 70 3.7506 0.0484 ## 71 3.7506 0.0484 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 4129 rows ] time_period_sim_calc &lt;- time_period_sim %&gt;% left_join(summary_pathways %&gt;% mutate(date = case_when( date == &quot;09/06/22&quot; ~ &quot;06 Sept&quot;, date == &quot;09/18/22&quot; ~ &quot;18 Sept&quot;, date == &quot;08/16/22&quot; ~ &quot;16 Aug&quot;, date == &quot;08/30/22&quot; ~ &quot;30 Aug&quot;, date == &quot;09/13/22&quot; ~ &quot;13 Sept&quot;, date == &quot;08/22/22&quot; ~ &quot;22 Aug&quot; ), site = if_else(site == &quot;Sister3&quot;, &quot;Sister&quot;, site)), by = c(&quot;site&quot;,&quot;date&quot;))%&gt;% mutate(ch4_accurate_20perc = if_else(alt_time_diffusion_ch4 &gt; (flux_round_diffusion_CH4 * 0.8) &amp; alt_time_diffusion_ch4 &lt; (flux_round_diffusion_CH4 *1.2), TRUE, FALSE), ch4_accurate_95ci = if_else(alt_time_diffusion_ch4 &gt; flux_round_2.5_diffusion_CH4 &amp; alt_time_diffusion_ch4 &lt; flux_round_97.5_diffusion_CH4, TRUE, FALSE), co2_accurate_20perc = if_else(abs(alt_time_diffusion_co2) &gt; abs(flux_round_diffusion_CO2 * 0.8) &amp; abs(alt_time_diffusion_co2) &lt; abs(flux_round_diffusion_CO2 *1.2), TRUE, FALSE), co2_accurate_95ci = if_else(alt_time_diffusion_co2 &gt; flux_round_2.5_diffusion_CO2 &amp; alt_time_diffusion_co2 &lt; flux_round_97.5_diffusion_CO2, TRUE, FALSE), ch4_diff = alt_time_diffusion_ch4 / flux_round_diffusion_CH4, co2_diff = alt_time_diffusion_co2/ flux_round_diffusion_CO2 ) time_period_summ &lt;- time_period_sim_calc %&gt;% group_by(date, np) %&gt;% summarize(accuracy_ch4 = sum(ch4_accurate_20perc), accuracy_co2 = sum(co2_accurate_20perc), accuracy_ch4_95ci = sum(ch4_accurate_95ci), accuracy_co2_95ci = sum(co2_accurate_95ci)) %&gt;% mutate(sampling = case_when( date == &quot;06 Sept&quot; ~ &quot;Catfish \\n06 Sept\\n&quot;, date == &quot;18 Sept&quot; ~ &quot;Catfish \\n18 Sept\\n&quot;, date == &quot;16 Aug&quot; ~ &quot;Deans \\n16 Aug\\n&quot;, date == &quot;30 Aug&quot; ~ &quot;Deans \\n30 Aug\\n&quot;, date == &quot;13 Sept&quot; ~ &quot;Blue Herron \\n13 Sept\\n&quot;, date == &quot;22 Aug&quot; ~ &quot;Sister \\n22 Aug&quot; )) ## `summarise()` has grouped output by &#39;date&#39;. You can override using the `.groups` argument. time_co2 &lt;- time_period_summ %&gt;% ggplot(aes(np, accuracy_co2_95ci, shape = sampling))+ geom_point(size = 2)+ scale_shape_manual(values = c(16, 24, 21, 3, 17, 8))+ theme_bw()+ labs(x= &quot;Sampling periods (#)&quot;, y = &quot;Simulations within 95% CI (%)&quot;)+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), legend.text = element_text(size = 14)) time_ch4 &lt;- time_period_summ %&gt;% ggplot(aes(np, accuracy_ch4_95ci, shape = sampling))+ geom_point(size = 2)+ scale_shape_manual(values = c(16, 24, 21, 3, 17, 8))+ theme_bw()+ labs(x= &quot;Sampling periods (#)&quot;, y = &quot;Simulations within 95% CI (%)&quot;)+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), legend.text = element_text(size = 14)) time_period_sim_calc %&gt;% ggplot(aes(np, co2_diff))+geom_point() + geom_hline(yintercept = 1, color = &quot;red&quot;) space_sim &lt;- data.frame() samplings &lt;- list(deans_pts_16, deans_pts_30, catfish_pts_06, catfish_pts_18, pick_pts_13, sister3_pts_22) time_vec &lt;- list(deans_16_time, deans_30_time, catfish_06_time, catfish_18_time, pick_13_time, sister3_22_time) site_vec &lt;- c(&quot;Deans&quot;, &quot;Deans&quot;, &quot;Catfish&quot;, &quot;Catfish&quot;, &quot;Pick&quot;, &quot;Sister&quot;) date_vec &lt;- c(&quot;16 Aug&quot;, &quot;30 Aug&quot;, &quot;06 Sept&quot;, &quot;18 Sept&quot;, &quot;13 Sept&quot;, &quot;22 Aug&quot;) for(j in 1:length(samplings)){ location_vec &lt;- unique(samplings[j][[1]]$location) for(i in 1:(length(location_vec)-1)){ for(f in 1:100){ tp &lt;- sample(location_vec,i,replace = FALSE) temp &lt;- alt_sim_space(samplings[j][[1]], time_vec[j][[1]], tp) %&gt;% mutate(site = site_vec[j], date = date_vec[j], tp = length(tp)) space_sim &lt;- bind_rows(space_sim, temp) } } } space_sim_calc &lt;- space_sim %&gt;% left_join(summary_pathways %&gt;% mutate(date = case_when( date == &quot;09/06/22&quot; ~ &quot;06 Sept&quot;, date == &quot;09/18/22&quot; ~ &quot;18 Sept&quot;, date == &quot;08/16/22&quot; ~ &quot;16 Aug&quot;, date == &quot;08/30/22&quot; ~ &quot;30 Aug&quot;, date == &quot;09/13/22&quot; ~ &quot;13 Sept&quot;, date == &quot;08/22/22&quot; ~ &quot;22 Aug&quot; ), site = if_else(site == &quot;Sister3&quot;, &quot;Sister&quot;, site)), by = c(&quot;site&quot;,&quot;date&quot;))%&gt;% mutate(ch4_accurate_20perc = if_else(abs(alt_space_diffusion_ch4) &gt; abs(flux_round_diffusion_CH4 * 0.8) &amp; abs(alt_space_diffusion_ch4) &lt; abs(flux_round_diffusion_CH4 *1.2), TRUE, FALSE), ch4_accurate_95ci = if_else(alt_space_diffusion_ch4 &gt; flux_round_2.5_diffusion_CH4 &amp; alt_space_diffusion_ch4 &lt; flux_round_97.5_diffusion_CH4, TRUE, FALSE), co2_accurate_20perc = if_else(abs(alt_space_diffusion_co2) &gt; abs(flux_round_diffusion_CO2 * 0.8) &amp; abs(alt_space_diffusion_co2) &lt; abs(flux_round_diffusion_CO2 *1.2), TRUE, FALSE), co2_accurate_95ci = if_else(alt_space_diffusion_co2 &gt; flux_round_2.5_diffusion_CO2 &amp; alt_space_diffusion_co2 &lt; flux_round_97.5_diffusion_CO2, TRUE, FALSE), ch4_diff = alt_space_diffusion_ch4 / flux_round_diffusion_CH4, co2_diff = alt_space_diffusion_co2/ flux_round_diffusion_CO2 ) space_summ &lt;- space_sim_calc %&gt;% group_by(date, tp) %&gt;% summarize(accuracy_ch4 = sum(ch4_accurate_20perc), accuracy_co2 = sum(co2_accurate_20perc), accuracy_ch4_95ci = sum(ch4_accurate_95ci), accuracy_co2_95ci = sum(co2_accurate_95ci)) %&gt;% mutate(sampling = case_when( date == &quot;06 Sept&quot; ~ &quot;Catfish \\n06 Sept&quot;, date == &quot;18 Sept&quot; ~ &quot;Catfish \\n18 Sept&quot;, date == &quot;16 Aug&quot; ~ &quot;Deans \\n16 Aug&quot;, date == &quot;30 Aug&quot; ~ &quot;Deans \\n30 Aug&quot;, date == &quot;13 Sept&quot; ~ &quot;Blue Herron \\n13 Sept&quot;, date == &quot;22 Aug&quot; ~ &quot;Sister \\n22 Aug&quot; )) ## `summarise()` has grouped output by &#39;date&#39;. You can override using the `.groups` argument. space_ch4 &lt;- space_summ %&gt;% ggplot(aes(tp, accuracy_ch4_95ci, shape = sampling))+ geom_point(size = 2)+ scale_shape_manual(values = c(16, 24, 21, 3, 17, 8))+ theme_bw()+ labs(x= &quot;Sampling locations (#)&quot;, y = &quot;Simulations within 95% CI (%)&quot;)+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), legend.text = element_text(size = 14)) space_co2 &lt;- space_summ %&gt;% ggplot(aes(tp, accuracy_co2_95ci, shape = sampling))+ geom_point(size = 2)+ scale_shape_manual(values = c(16, 24, 21, 3, 17, 8))+ theme_bw()+ labs(x= &quot;Sampling locations (#)&quot;, y = &quot;Simulations within 95% CI (%)&quot;)+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), legend.text = element_text(size = 14)) title &lt;- ggdraw() + draw_label( &quot;Simulations within 95% CI (%)&quot;, angle = 90, size = 16 ) interior &lt;- plot_grid(time_co2+ theme(legend.position = &quot;none&quot;, axis.title.y = element_blank(), axis.title.x = element_blank()), space_co2+ theme(legend.position = &quot;none&quot;, axis.title.y = element_blank(), axis.title.x = element_blank()), time_ch4+ theme(legend.position = &quot;none&quot;, axis.title.y = element_blank()), space_ch4+ theme(legend.position = &quot;none&quot;, axis.title.y = element_blank()), labels = &quot;AUTO&quot;, label_x = 0.15, label_y = 0.98) interior png(filename = &quot;4-Figures/consequences.png&quot;, width = 8, height = 5, units = &quot;in&quot;, res = 300) plot_grid(title, interior, get_legend(time_co2), ncol = 3, rel_widths = c(0.05, 0.75, 0.2)) dev.off() ## png ## 2 "],["analyses-of-patterns-of-diel-diffusive-emissions.html", "Chapter 13 Analyses of patterns of diel diffusive emissions 13.1 Diel patterns in environmental variables 13.2 CH4 models 13.3 CO2 models 13.4 CH4 plots 13.5 CO2 plots", " Chapter 13 Analyses of patterns of diel diffusive emissions 13.1 Diel patterns in environmental variables 13.1.1 Weather station hourly windspeed from Aug 14 - Sept 19 13.1.2 Dissolved oxygen ## `summarise()` has grouped output by &#39;sampling&#39;. You can override using the `.groups` argument. TODO: separate lux, temp, bottom, top do, and ws model and then mutliple of those 13.2 CH4 models 13.2.1 windspeed with handheld anemometer ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ ws_mean + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5568.3 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6255 -0.0771 -0.0410 0.0068 11.4090 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 2.261e-05 0.004755 ## Residual 1.310e-05 0.003619 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 2.349e-03 1.949e-03 5.024e+00 1.205 0.282 ## ws_mean 4.564e-05 2.426e-04 6.650e+02 0.188 0.851 ## ## Correlation of Fixed Effects: ## (Intr) ## ws_mean -0.054 ## ## Call: ## lm(formula = flux_ch4_g_hr ~ ws_mean, data = diffusion_env %&gt;% ## filter(site == &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.010348 -0.006116 -0.003033 0.003795 0.040663 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.011863 0.001328 8.933 3.41e-14 *** ## ws_mean 0.001031 0.004094 0.252 0.802 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.009451 on 94 degrees of freedom ## Multiple R-squared: 0.0006744, Adjusted R-squared: -0.009957 ## F-statistic: 0.06343 on 1 and 94 DF, p-value: 0.8017 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ ws_mean + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -6680.3 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.9014 -0.3515 -0.2012 0.0132 8.7925 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 3.660e-09 0.0000605 ## Residual 4.738e-07 0.0006884 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 4.083e-04 4.408e-05 4.087e+00 9.264 0.000682 *** ## ws_mean 3.672e-05 4.152e-05 7.494e+01 0.884 0.379342 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## ws_mean -0.422 13.2.2 Light ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ scale(Lux) + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5567.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6253 -0.0820 -0.0405 0.0146 11.4157 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 2.249e-05 0.004742 ## Residual 1.309e-05 0.003618 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 2.370e-03 1.941e-03 4.996e+00 1.221 0.277 ## scale(Lux) -7.894e-05 1.414e-04 6.621e+02 -0.558 0.577 ## ## Correlation of Fixed Effects: ## (Intr) ## scale(Lux) -0.001 ## ## Call: ## lm(formula = flux_ch4_g_hr ~ scale(Lux), data = diffusion_env %&gt;% ## filter(site == &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.009908 -0.006274 -0.003303 0.003529 0.041127 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.0120926 0.0009600 12.60 &lt;2e-16 *** ## scale(Lux) -0.0009552 0.0009650 -0.99 0.325 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.009406 on 94 degrees of freedom ## Multiple R-squared: 0.01032, Adjusted R-squared: -0.0002134 ## F-statistic: 0.9797 on 1 and 94 DF, p-value: 0.3248 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ scale(Lux) + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -6682.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.8810 -0.3524 -0.1932 0.0298 8.6660 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 5.199e-09 0.0000721 ## Residual 4.708e-07 0.0006862 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 4.239e-04 4.364e-05 3.376e+00 9.714 0.00139 ** ## scale(Lux) 5.594e-05 2.884e-05 5.709e+02 1.940 0.05288 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## scale(Lux) -0.011 ## # R2 for Mixed Models ## ## Conditional R2: 0.017 ## Marginal R2: 0.007 13.2.3 Temperature ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ temp + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5572 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.5964 -0.1091 -0.0408 0.0480 11.4594 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 1.993e-05 0.004464 ## Residual 1.305e-05 0.003612 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 1.715e-02 8.418e-03 9.927e+01 2.037 0.0443 * ## temp -5.704e-04 3.172e-04 1.405e+02 -1.798 0.0743 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## temp -0.976 ## # R2 for Mixed Models ## ## Conditional R2: 0.630 ## Marginal R2: 0.065 ## ## Call: ## lm(formula = flux_ch4_g_hr ~ temp, data = diffusion_env %&gt;% filter(site == ## &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.008829 -0.006330 -0.002910 0.004406 0.041759 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.099988 0.057470 1.74 0.0852 . ## temp -0.003689 0.002411 -1.53 0.1295 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.009339 on 94 degrees of freedom ## Multiple R-squared: 0.02429, Adjusted R-squared: 0.01391 ## F-statistic: 2.34 on 1 and 94 DF, p-value: 0.1295 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ temp + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -6677.9 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.9294 -0.3447 -0.2030 0.0011 8.7647 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 7.338e-09 8.566e-05 ## Residual 4.732e-07 6.879e-04 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 6.279e-04 4.825e-04 2.596e+00 1.301 0.297 ## temp -7.776e-06 1.838e-05 2.689e+00 -0.423 0.704 ## ## Correlation of Fixed Effects: ## (Intr) ## temp -0.995 13.2.4 Dissolved oxygen ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ mean_bottom_do + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5568.1 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6180 -0.0778 -0.0400 0.0134 11.4186 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 2.173e-05 0.004661 ## Residual 1.310e-05 0.003620 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 2.599e-03 2.071e-03 6.428e+00 1.255 0.253 ## mean_bottom_do -6.180e-05 2.152e-04 5.987e+02 -0.287 0.774 ## ## Correlation of Fixed Effects: ## (Intr) ## mean_bttm_d -0.388 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ mean_top_do + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5574.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6222 -0.1346 -0.0374 0.0725 11.4726 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 9.787e-06 0.003128 ## Residual 1.307e-05 0.003615 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.0065594 0.0019707 11.1284177 3.328 0.00663 ** ## mean_top_do -0.0008419 0.0003001 64.1796688 -2.806 0.00663 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## mean_top_do -0.758 ## # R2 for Mixed Models ## ## Conditional R2: 0.488 ## Marginal R2: 0.105 ## # A tibble: 6 × 2 ## sampling slope_percentage_of_range ## &lt;chr&gt; &lt;dbl&gt; ## 1 Blue Herron 9/13 - 9/14 1.65 ## 2 Catfish 9/18 - 9/19 11.1 ## 3 Catfish 9/6 - 9/7 12.0 ## 4 Deans 8/16 - 8/17 22.7 ## 5 Deans 8/30 - 8/31 84.0 ## 6 Sister 8/22 - 8/23 31.2 13.2.5 Multiple predictors ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_ch4_g_hr ~ scale(mean_top_do) + scale(mean_bottom_do) + ## scale(temp) + scale(Lux) + scale(ws_mean) + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -5519.6 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6098 -0.1211 -0.0380 0.0590 11.4213 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 1.243e-05 0.003526 ## Residual 1.311e-05 0.003621 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 2.424e-03 1.473e-03 3.222e+00 1.645 0.1921 ## scale(mean_top_do) -1.513e-03 8.907e-04 4.200e+01 -1.699 0.0968 . ## scale(mean_bottom_do) 2.339e-04 4.099e-04 5.996e+02 0.571 0.5685 ## scale(temp) -3.718e-04 1.170e-03 1.832e+01 -0.318 0.7543 ## scale(Lux) -9.308e-05 1.489e-04 6.595e+02 -0.625 0.5321 ## scale(ws_mean) 9.763e-05 1.775e-04 6.625e+02 0.550 0.5825 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) scl(mn_t_) scl(mn_b_) scl(t) scl(L) ## scl(mn_tp_) 0.127 ## scl(mn_bt_) 0.039 -0.245 ## scale(temp) -0.187 -0.665 -0.110 ## scale(Lux) -0.031 -0.136 0.030 0.171 ## scal(ws_mn) -0.005 -0.033 -0.066 -0.018 -0.258 ## Fixed term is &quot;(Intercept)&quot; ## Global model call: lmer(formula = flux_ch4_g_hr ~ scale(mean_top_do) + scale(mean_bottom_do) + ## scale(temp) + scale(Lux) + scale(ws_mean) + (1 | sampling), ## data = diffusion_env, na.action = &quot;na.fail&quot;) ## --- ## Model selection table ## (Int) scl(Lux) scl(men_btt_do) scl(men_top_do) scl(tmp) scl(ws_men) df logLik AICc delta ## 1 0.002369 3 2791.516 -5577.0 0.00 ## 5 0.002323 -0.001634 4 2787.774 -5567.5 9.51 ## 9 0.002700 -0.0015130 4 2786.951 -5565.8 11.15 ## 3 0.002360 -0.0001065 4 2784.574 -5561.1 15.91 ## 17 0.002367 3.204e-05 4 2783.774 -5559.5 17.51 ## 2 0.002370 -7.894e-05 4 2783.727 -5559.4 17.60 ## 13 0.002358 -0.001488 -0.0001396 5 2781.892 -5553.7 23.30 ## 7 0.002339 0.0002310 -0.001774 5 2781.042 -5552.0 25.00 ## 11 0.002752 0.0001834 -0.0016750 5 2780.148 -5550.2 26.79 ## 21 0.002317 -0.001672 7.836e-05 5 2780.123 -5550.2 26.84 ## 6 0.002324 -6.667e-05 -0.001623 5 2779.940 -5549.8 27.21 ## 10 0.002716 -1.062e-04 -0.0015780 5 2779.290 -5548.5 28.51 ## 25 0.002701 -0.0015270 4.914e-05 5 2779.233 -5548.4 28.62 ## 19 0.002357 -0.0001146 3.698e-05 5 2776.843 -5543.6 33.40 ## 4 0.002361 -7.961e-05 -0.0001102 5 2776.788 -5543.5 33.51 ## 18 0.002367 -9.201e-05 6.072e-05 5 2776.062 -5542.0 34.96 ## 15 0.002402 0.0002508 -0.001569 -0.0002549 6 2775.191 -5538.3 38.74 ## 29 0.002348 -0.001535 -0.0001219 7.636e-05 6 2774.236 -5536.3 40.65 ## 14 0.002386 -7.237e-05 -0.001404 -0.0002522 6 2774.088 -5536.0 40.95 ## 23 0.002333 0.0002200 -0.001803 7.249e-05 6 2773.378 -5534.6 42.37 ## 8 0.002340 -6.414e-05 0.0002249 -0.001760 6 2773.201 -5534.3 42.72 ## 12 0.002771 -1.080e-04 0.0001925 -0.0017500 6 2772.497 -5532.9 44.13 ## 27 0.002749 0.0001744 -0.0016790 4.314e-05 6 2772.425 -5532.7 44.27 ## 22 0.002317 -8.914e-05 -0.001670 1.060e-04 6 2772.398 -5532.7 44.33 ## 26 0.002720 -1.261e-04 -0.0016160 8.950e-05 6 2771.696 -5531.3 45.73 ## 20 0.002356 -9.407e-05 -0.0001254 6.676e-05 6 2769.141 -5526.2 50.84 ## 31 0.002391 0.0002391 -0.001610 -0.0002311 6.941e-05 7 2767.520 -5520.9 56.13 ## 16 0.002432 -7.225e-05 0.0002507 -0.001480 -0.0003740 7 2767.388 -5520.6 56.39 ## 30 0.002381 -9.481e-05 -0.001444 -0.0002603 1.050e-04 7 2766.544 -5518.9 58.08 ## 24 0.002332 -8.538e-05 0.0002080 -0.001794 9.930e-05 7 2765.639 -5517.1 59.89 ## 28 0.002769 -1.265e-04 0.0001767 -0.0017710 8.352e-05 7 2764.890 -5515.6 61.39 ## 32 0.002424 -9.308e-05 0.0002339 -0.001513 -0.0003718 9.763e-05 8 2759.821 -5503.4 73.57 ## weight ## 1 0.987 ## 5 0.009 ## 9 0.004 ## 3 0.000 ## 17 0.000 ## 2 0.000 ## 13 0.000 ## 7 0.000 ## 11 0.000 ## 21 0.000 ## 6 0.000 ## 10 0.000 ## 25 0.000 ## 19 0.000 ## 4 0.000 ## 18 0.000 ## 15 0.000 ## 29 0.000 ## 14 0.000 ## 23 0.000 ## 8 0.000 ## 12 0.000 ## 27 0.000 ## 22 0.000 ## 26 0.000 ## 20 0.000 ## 31 0.000 ## 16 0.000 ## 30 0.000 ## 24 0.000 ## 28 0.000 ## 32 0.000 ## Models ranked by AICc(x) ## Random terms (all models): ## 1 | sampling 13.3 CO2 models 13.3.1 windspeed with handheld anemometer ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ ws_mean + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -813.5 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2196 -0.2665 -0.0538 0.1853 6.3076 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.003652 0.06043 ## Residual 0.016584 0.12878 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.360e-02 2.547e-02 5.168e+00 3.675 0.0135 * ## ws_mean 3.048e-03 8.554e-03 6.513e+02 0.356 0.7217 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## ws_mean -0.145 ## ## Call: ## lm(formula = flux_co2_g_hr ~ ws_mean, data = diffusion_env %&gt;% ## filter(site == &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.81689 -0.12466 0.03224 0.15450 0.99250 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.23471 0.04276 5.489 3.42e-07 *** ## ws_mean -0.31472 0.13184 -2.387 0.019 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3044 on 94 degrees of freedom ## Multiple R-squared: 0.05716, Adjusted R-squared: 0.04713 ## F-statistic: 5.699 on 1 and 94 DF, p-value: 0.01898 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ ws_mean + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -1659.3 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.0442 -0.5885 -0.1558 0.2775 7.5452 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.003155 0.05617 ## Residual 0.003035 0.05509 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 7.595e-02 2.529e-02 4.031e+00 3.003 0.03945 * ## ws_mean 1.067e-02 3.735e-03 5.705e+02 2.856 0.00444 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## ws_mean -0.070 ## # R2 for Mixed Models ## ## Conditional R2: 0.515 ## Marginal R2: 0.010 13.3.2 Light ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ scale(Lux) + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -812.4 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2093 -0.2645 -0.0552 0.1803 6.3229 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.00366 0.0605 ## Residual 0.01658 0.1288 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 9.489e-02 2.523e-02 4.962e+00 3.761 0.0133 * ## scale(Lux) 1.747e-03 5.032e-03 6.631e+02 0.347 0.7286 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## scale(Lux) -0.003 ## ## Call: ## lm(formula = flux_co2_g_hr ~ scale(Lux), data = diffusion_env %&gt;% ## filter(site == &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.80956 -0.11670 0.04636 0.14670 0.80352 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.16455 0.03151 5.222 1.06e-06 *** ## scale(Lux) -0.05371 0.03168 -1.695 0.0933 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3088 on 94 degrees of freedom ## Multiple R-squared: 0.02967, Adjusted R-squared: 0.01935 ## F-statistic: 2.874 on 1 and 94 DF, p-value: 0.09332 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ scale(Lux) + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -1670.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.7334 -0.6059 -0.1850 0.2782 6.9874 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.003259 0.05709 ## Residual 0.002971 0.05451 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.08074 0.02564 3.99341 3.149 0.0346 * ## scale(Lux) 0.01037 0.00230 567.15610 4.509 7.91e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## scale(Lux) -0.002 ## # R2 for Mixed Models ## ## Conditional R2: 0.531 ## Marginal R2: 0.017 13.3.3 Temperature ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ temp + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -820.9 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2361 -0.2536 -0.0546 0.1606 6.3725 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.005638 0.07509 ## Residual 0.016349 0.12786 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.746231 0.233340 13.378552 3.198 0.00677 ** ## temp -0.025147 0.008929 13.940260 -2.816 0.01378 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## temp -0.991 ## # R2 for Mixed Models ## ## Conditional R2: 0.382 ## Marginal R2: 0.168 ## ## Call: ## lm(formula = flux_co2_g_hr ~ temp, data = diffusion_env %&gt;% filter(site == ## &quot;Blue Herron&quot;)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.79006 -0.18967 0.06233 0.16542 0.81953 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.68192 1.92250 0.875 0.384 ## temp -0.06368 0.08067 -0.789 0.432 ## ## Residual standard error: 0.3124 on 94 degrees of freedom ## Multiple R-squared: 0.006585, Adjusted R-squared: -0.003983 ## F-statistic: 0.6231 on 1 and 94 DF, p-value: 0.4319 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ temp + (1 | sampling) ## Data: diffusion_env %&gt;% filter(site != &quot;Blue Herron&quot;) ## ## REML criterion at convergence: -1688.8 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.8247 -0.6071 -0.1577 0.2118 7.6856 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.009780 0.09889 ## Residual 0.002862 0.05350 ## Number of obs: 573, groups: sampling, 5 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.968546 0.147120 109.615317 6.583 1.64e-09 *** ## temp -0.033714 0.005329 286.851222 -6.326 9.61e-10 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## temp -0.954 ## # R2 for Mixed Models ## ## Conditional R2: 0.867 ## Marginal R2: 0.411 ## # A tibble: 5 × 2 ## sampling slope_percentage_of_range ## &lt;chr&gt; &lt;dbl&gt; ## 1 Catfish 9/18 - 9/19 13.2 ## 2 Catfish 9/6 - 9/7 6.81 ## 3 Deans 8/16 - 8/17 8.47 ## 4 Deans 8/30 - 8/31 19.7 ## 5 Sister 8/22 - 8/23 44.9 13.3.4 Dissolved oxygen ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ mean_bottom_do + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -814.6 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2048 -0.2678 -0.0661 0.1707 6.3295 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.002744 0.05238 ## Residual 0.016578 0.12876 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.129760 0.033338 13.151025 3.892 0.00182 ** ## mean_bottom_do -0.009324 0.006704 62.706406 -1.391 0.16920 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## mean_bttm_d -0.751 ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ mean_top_do + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -825.3 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2730 -0.2588 -0.0518 0.1918 6.3491 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.002116 0.0460 ## Residual 0.016348 0.1279 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.22993 0.04212 8.23615 5.459 0.000545 *** ## mean_top_do -0.02711 0.00750 10.60860 -3.614 0.004306 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## mean_top_do -0.887 ## # R2 for Mixed Models ## ## Conditional R2: 0.230 ## Marginal R2: 0.130 13.3.5 Multiple predictors ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: flux_co2_g_hr ~ scale(mean_top_do) + scale(mean_bottom_do) + ## scale(temp) + scale(Lux) + scale(ws_mean) + (1 | sampling) ## Data: diffusion_env ## ## REML criterion at convergence: -798.8 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -6.2732 -0.2583 -0.0524 0.1829 6.3235 ## ## Random effects: ## Groups Name Variance Std.Dev. ## sampling (Intercept) 0.002781 0.05274 ## Residual 0.016382 0.12799 ## Number of obs: 669, groups: sampling, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.097432 0.022844 2.923888 4.265 0.0249 * ## scale(mean_top_do) -0.055516 0.023163 15.450932 -2.397 0.0296 * ## scale(mean_bottom_do) 0.009557 0.014097 543.087147 0.678 0.4981 ## scale(temp) -0.016237 0.025025 4.944912 -0.649 0.5454 ## scale(Lux) 0.001314 0.005213 659.880971 0.252 0.8011 ## scale(ws_mean) 0.004158 0.006219 629.620497 0.668 0.5041 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) scl(mn_t_) scl(mn_b_) scl(t) scl(L) ## scl(mn_tp_) 0.132 ## scl(mn_bt_) 0.023 -0.506 ## scale(temp) -0.244 -0.562 0.066 ## scale(Lux) -0.025 -0.091 0.057 0.110 ## scal(ws_mn) -0.001 -0.005 -0.063 -0.072 -0.263 ## Fixed term is &quot;(Intercept)&quot; ## Global model call: lmer(formula = flux_co2_g_hr ~ scale(mean_top_do) + scale(mean_bottom_do) + ## scale(temp) + scale(Lux) + scale(ws_mean) + (1 | sampling), ## data = diffusion_env, na.action = &quot;na.fail&quot;) ## --- ## Model selection table ## (Int) scl(Lux) scl(men_btt_do) scl(men_top_do) scl(tmp) scl(ws_men) df logLik AICc delta weight ## 5 0.09353 -0.05260 4 413.309 -818.6 0.00 0.720 ## 1 0.09492 3 410.514 -815.0 3.57 0.121 ## 9 0.10930 -0.06671 4 411.439 -814.8 3.74 0.111 ## 13 0.09752 -0.04638 -0.01806 5 410.713 -811.3 7.22 0.019 ## 7 0.09420 0.0107000 -0.06088 5 410.248 -810.4 8.15 0.012 ## 21 0.09325 -0.05342 0.004865 5 409.434 -808.8 9.78 0.005 ## 6 0.09349 2.396e-03 -0.05282 5 409.045 -808.0 10.56 0.004 ## 3 0.09357 -0.0160600 4 407.838 -807.6 10.94 0.003 ## 11 0.10930 -0.0007850 -0.06686 5 408.028 -806.0 12.59 0.001 ## 25 0.10920 -0.06721 0.003452 5 407.407 -804.7 13.83 0.001 ## 17 0.09479 0.002140 4 406.381 -804.7 13.86 0.001 ## 2 0.09489 1.747e-03 4 406.201 -804.3 14.22 0.001 ## 10 0.10920 7.433e-04 -0.06626 5 407.073 -804.1 14.50 0.001 ## 15 0.09797 0.0098850 -0.05447 -0.01728 6 407.615 -803.1 15.46 0.000 ## 29 0.09720 -0.04727 -0.01792 0.004768 6 406.827 -801.5 17.03 0.000 ## 14 0.09721 2.057e-03 -0.04708 -0.01684 6 406.422 -800.7 17.84 0.000 ## 23 0.09390 0.0103000 -0.06137 0.004701 6 406.351 -800.6 17.98 0.000 ## 8 0.09417 2.547e-03 0.0109700 -0.06131 6 405.999 -799.9 18.69 0.000 ## 22 0.09325 1.460e-03 -0.05348 0.004420 6 405.128 -798.1 20.43 0.000 ## 19 0.09334 -0.0168100 0.003109 5 403.776 -797.5 21.10 0.000 ## 4 0.09355 1.676e-03 -0.0160300 5 403.520 -796.9 21.61 0.000 ## 27 0.10880 -0.0018270 -0.06608 0.003515 6 404.003 -795.9 22.68 0.000 ## 12 0.10920 7.348e-04 -0.0009091 -0.06627 6 403.662 -795.2 23.36 0.000 ## 18 0.09480 1.377e-03 0.001717 5 402.078 -794.1 24.49 0.000 ## 26 0.10920 -1.353e-05 -0.06722 0.003457 6 403.067 -794.0 24.55 0.000 ## 31 0.09759 0.0093540 -0.05499 -0.01701 0.004565 7 403.703 -793.2 25.32 0.000 ## 16 0.09762 2.207e-03 0.0101400 -0.05547 -0.01585 7 403.337 -792.5 26.05 0.000 ## 30 0.09706 1.112e-03 -0.04757 -0.01732 0.004425 7 402.510 -790.9 27.71 0.000 ## 24 0.09391 1.654e-03 0.0105200 -0.06160 0.004194 7 402.058 -789.9 28.61 0.000 ## 20 0.09335 1.074e-03 -0.0167100 0.002774 6 399.460 -786.8 31.77 0.000 ## 28 0.10880 -1.937e-05 -0.0018280 -0.06609 0.003522 7 399.664 -785.2 33.40 0.000 ## 32 0.09743 1.314e-03 0.0095570 -0.05552 -0.01624 0.004158 8 399.397 -782.6 35.98 0.000 ## Models ranked by AICc(x) ## Random terms (all models): ## 1 | sampling 13.4 CH4 plots ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; 13.5 CO2 plots ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; ## `geom_smooth()` using formula = &#39;y ~ x&#39; "],["outputs.html", "Chapter 14 Outputs", " Chapter 14 Outputs #png(filename = &quot;4-Figures/co2-eq-summary.png&quot;, width = 8, height = 5, units = &quot;in&quot;, res = 300) all_fluxes_pathways %&gt;% mutate(flux_mean_g_m2_day_co2_eq = flux_mean_g_day_co2_eq/area, flux_2.5_g_m2_day_co2_eq= flux_2.5_g_day_co2_eq/area, flux_97.5_g_m2_day_co2_eq= flux_97.5_g_day_co2_eq/area, pathway_gas = paste(pathway, gas, sep = &quot; &quot;) %&gt;% as.factor() %&gt;% fct_relevel(&quot;diffusion CO2&quot;, after = 0), site_date = paste(site, date, sep = &quot; &quot;)) %&gt;% ggplot(aes(site_date, flux_mean_g_m2_day_co2_eq, fill = pathway_gas)) + geom_bar(position = position_dodge(), stat = &quot;identity&quot;)+ scale_x_discrete(labels = c(&quot;Catfish 09/06/22&quot; = &quot;Catfish 06 Sept&quot;, &quot;Catfish 09/18/22&quot; = &quot;Catfish 18 Sept&quot;, &quot;Deans 08/16/22&quot; = &quot;Deans 16 Aug&quot;, &quot;Deans 08/30/22&quot; = &quot;Deans 30 Aug&quot;, &quot;Pick 09/13/22&quot; = &quot;Blue Herron 13 Sept&quot;, &quot;Sister3 08/22/22&quot; = &quot;Sister 22 Aug&quot;))+ geom_errorbar(aes(ymax=flux_97.5_g_m2_day_co2_eq, ymin=flux_2.5_g_m2_day_co2_eq), position = position_dodge())+ scale_fill_manual(values = c(&quot;#BFDBC0&quot;,&quot;#94A7C5&quot;, &quot;#3D5170&quot;), labels = c(expression(diffusion~CO[2]), expression(diffusion~CH[4]), expression(ebullition~CH[4])))+ ylab(expression(CO[2]-equivalent ~ flux ~ (g~m^-2~day^-1)))+ theme_bw()+ theme(legend.text.align = 0, axis.title.x = element_blank(), legend.title = element_blank(), axis.text.x = element_text(angle=45, hjust=1), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), legend.text = element_text(size = 14)) #dev.off() #png(filename = &quot;4-Figures/do-all-summary.png&quot;, width = 8, height = 7, units = &quot;in&quot;, res = 300) ggplot() + geom_rect(data = anno, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2), fill = &quot;#a3cdff&quot;, alpha = 0.5)+ geom_line(data = do_crop, aes(Date_Time, DO_mgL))+ theme_bw()+ ylab(&quot;DO (mg/L)&quot;) + theme(axis.title.x = element_blank(), axis.text = element_text(size = 14, color = &quot;black&quot;), axis.title = element_text(size = 16, color = &quot;black&quot;), strip.text = element_text(size = 14, color = &quot;black&quot;))+ facet_grid(rows = vars(site)) #dev.off() co2_diel &lt;- all_fluxes_periods %&gt;% filter(gas == &quot;CO2&quot;, pathway == &quot;diffusion&quot;) %&gt;% filter(!(sampling == &quot;Deans1&quot; &amp; period == 8)) %&gt;% mutate(period = as.numeric(period), trip_wr =factor(case_when(period == 1 ~ &quot;10AM&quot;, period == 2 ~ &quot;1PM&quot;, period == 3 ~ &quot;4PM&quot;, period == 4 ~ &quot;7PM&quot;, period == 5 ~ &quot;10PM&quot;, period == 6 ~ &quot;1AM&quot;, period == 7 ~ &quot;4AM&quot;, period == 8 ~ &quot;7AM&quot;), levels = c(&quot;10AM&quot;, &quot;1PM&quot;, &quot;4PM&quot;, &quot;7PM&quot;, &quot;10PM&quot;, &quot;1AM&quot;, &quot;4AM&quot;, &quot;7AM&quot;))) %&gt;% mutate(sampling = case_when(sampling == &quot;Catfish1&quot; ~&quot;Catfish 06 Sept&quot;, sampling == &quot;Catfish2&quot; ~ &quot;Catfish 18 Sept&quot;, sampling == &quot;Deans1&quot; ~ &quot;Deans 16 Aug&quot;, sampling == &quot;Deans2&quot; ~ &quot;Deans 30 Aug&quot;, sampling == &quot;Pick1&quot; ~ &quot;Blue Herron 13 Sept&quot;, sampling == &quot;Sister31&quot; ~ &quot;Sister 22 Aug&quot;)) %&gt;% ggplot(aes(period, flux_mean_g_m2_hr))+ geom_point()+ geom_errorbar(aes(ymin = flux_2.5_g_m2_hr, ymax = flux_97.5_g_m2_hr))+ geom_line()+ facet_wrap(~sampling)+ scale_x_discrete(limits = factor(c(1,2,3,4,5,6,7,8)), labels = c(&quot;10:00&quot;, &quot;13:00&quot;, &quot;16:00&quot;, &quot;19:00&quot;, &quot;22:00&quot;, &quot;01:00&quot;, &quot;04:00&quot;, &quot;07:00&quot;))+ theme_bw()+ ylab(expression(Diffusive ~ Flux ~ (g~CO[2]~m^-2~hr^-1)))+ theme(axis.title.x = element_blank(), axis.text = element_text(size=14, color = &quot;black&quot;), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.y = element_text(size=16, color = &quot;black&quot;), strip.text = element_text(size=14, color = &quot;black&quot;)) ch4_diel &lt;- all_fluxes_periods %&gt;% filter(!(sampling == &quot;Deans1&quot; &amp; period == 8)) %&gt;% filter(gas == &quot;CH4&quot;, pathway == &quot;diffusion&quot;) %&gt;% mutate(period = as.numeric(period), trip_wr =factor(case_when(period == 1 ~ &quot;10AM&quot;, period == 2 ~ &quot;1PM&quot;, period == 3 ~ &quot;4PM&quot;, period == 4 ~ &quot;7PM&quot;, period == 5 ~ &quot;10PM&quot;, period == 6 ~ &quot;1AM&quot;, period == 7 ~ &quot;4AM&quot;, period == 8 ~ &quot;7AM&quot;), levels = c(&quot;10AM&quot;, &quot;1PM&quot;, &quot;4PM&quot;, &quot;7PM&quot;, &quot;10PM&quot;, &quot;1AM&quot;, &quot;4AM&quot;, &quot;7AM&quot;))) %&gt;% mutate(sampling = case_when(sampling == &quot;Catfish1&quot; ~&quot;Catfish 06 Sept&quot;, sampling == &quot;Catfish2&quot; ~ &quot;Catfish 18 Sept&quot;, sampling == &quot;Deans1&quot; ~ &quot;Deans 16 Aug&quot;, sampling == &quot;Deans2&quot; ~ &quot;Deans 30 Aug&quot;, sampling == &quot;Pick1&quot; ~ &quot;Blue Herron 13 Sept&quot;, sampling == &quot;Sister31&quot; ~ &quot;Sister 22 Aug&quot;)) %&gt;% ggplot(aes(period, flux_mean_g_m2_hr))+ geom_point()+ geom_errorbar(aes(ymin = flux_2.5_g_m2_hr, ymax = flux_97.5_g_m2_hr))+ geom_line()+ facet_wrap(~sampling)+ scale_x_discrete(limits = factor(c(1,2,3,4,5,6,7,8)), labels = c(&quot;10:00&quot;, &quot;13:00&quot;, &quot;16:00&quot;, &quot;19:00&quot;, &quot;22:00&quot;, &quot;01:00&quot;, &quot;04:00&quot;, &quot;07:00&quot;))+ theme_bw()+ ylab(expression(Diffusive ~ Flux ~ (g~CH[4]~m^-2~hr^-1)))+ theme(axis.title.x = element_blank(), axis.text = element_text(size=14, color = &quot;black&quot;), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.y = element_text(size=16, color = &quot;black&quot;), strip.text = element_text(size=14, color = &quot;black&quot;)) eb_diel &lt;- all_fluxes_periods %&gt;% filter(gas == &quot;CH4&quot;, pathway == &quot;ebullition&quot;, period != &quot;8~9&quot;) %&gt;% mutate(trip = case_when(period == &quot;0~1&quot; ~ 1, period == &quot;1~2&quot; ~ 2, period == &quot;2~3&quot; ~ 3, period == &quot;3~4&quot; ~ 4, period == &quot;4~5&quot; ~ 5, period == &quot;5~6&quot; ~ 6, period == &quot;6~7&quot; ~ 7, period == &quot;7~8&quot; ~ 8)) %&gt;% mutate(sampling = case_when(sampling == &quot;Catfish1&quot; ~&quot;Catfish 06 Sept&quot;, sampling == &quot;Catfish2&quot; ~ &quot;Catfish 18 Sept&quot;, sampling == &quot;Deans1&quot; ~ &quot;Deans 16 Aug&quot;, sampling == &quot;Deans2&quot; ~ &quot;Deans 30 Aug&quot;, sampling == &quot;Pick1&quot; ~ &quot;Blue Herron 13 Sept&quot;, sampling == &quot;Sister31&quot; ~ &quot;Sister 22 Aug&quot;)) %&gt;% ggplot(aes(trip, flux_mean_g_m2_hr))+ geom_point()+ geom_errorbar(aes(ymin = flux_2.5_g_m2_hr, ymax = flux_97.5_g_m2_hr))+ geom_line()+ facet_wrap(~sampling)+ scale_x_discrete(limits = factor(c(1,2,3,4,5,6,7,8)), labels = c(&quot;10:00&quot;, &quot;13:00&quot;, &quot;16:00&quot;, &quot;19:00&quot;, &quot;22:00&quot;, &quot;01:00&quot;, &quot;04:00&quot;, &quot;07:00&quot;))+ theme_bw()+ ylab(expression(Ebullitive ~ Flux ~ (g~CH[4]~m^-2~hr^-1)))+ theme(axis.title.x = element_blank(), axis.text = element_text(size=14, color = &quot;black&quot;), axis.text.x = element_text(angle = 45, hjust = 1), axis.title.y = element_text(size=16, color = &quot;black&quot;), strip.text = element_text(size=14, color = &quot;black&quot;)) #png(filename = &quot;4-Figures/periods.png&quot;, width = 7.5, height = 11.5, units = &quot;in&quot;, res = 300) plot_grid(co2_diel, ch4_diel, eb_diel, ncol = 1, labels = &quot;AUTO&quot;, label_size = 18, vjust = 1.3) #dev.off() sc_ch4 &lt;- ggplot(suncloud, aes(time %&gt;% as.POSIXct(), flux_ch4_g_hr)) + geom_point(aes(color = sampling,shape = wolffia), size =3, stroke = 1)+ scale_shape_manual(values = c(21, 24), labels = c(expression(No~italic(Wolffia)), expression(italic(Wolffia))))+ scale_color_manual(values = c(&quot;#595864&quot;, &quot;#DCAE27&quot;))+ theme_bw()+ ylab(expression(Diffusive ~ CH[4]~ flux ~ (g~m^-2~hr^-1)))+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 16, color = &quot;black&quot;), axis.title = element_text(size = 18, color = &quot;black&quot;), legend.text = element_text(size = 16), axis.title.x = element_blank())+ scale_x_datetime(date_labels = &quot;%H:%M&quot;) sc_co2 &lt;- ggplot(suncloud, aes(time %&gt;% as.POSIXct(), flux_co2_g_hr)) + geom_point(aes(color = sampling,shape = wolffia), size =3, stroke = 1)+ scale_shape_manual(values = c(21, 24), labels = c(expression(No~italic(Wolffia)), expression(italic(Wolffia))))+ scale_color_manual(values = c(&quot;#595864&quot;, &quot;#DCAE27&quot;))+ theme_bw()+ ylab(expression(Diffusive ~ CO[2]~ flux ~ (g~m^-2~hr^-1)))+ theme(legend.text.align = 0, legend.title = element_blank(), axis.text = element_text(size = 16, color = &quot;black&quot;), axis.title = element_text(size = 18, color = &quot;black&quot;), legend.text = element_text(size = 16), axis.title.x = element_blank())+ scale_x_datetime(date_labels = &quot;%H:%M&quot;) sc_legend &lt;- get_legend(sc_co2) #png(filename = &quot;4-Figures/sunny-cloudy.png&quot;, width = 12, height = 5, units = &quot;in&quot;, res = 300) plot_grid(sc_ch4 + theme(legend.position = &quot;none&quot;), sc_co2+ theme(legend.position = &quot;none&quot;), sc_legend, rel_widths = c(0.425,0.425, 0.15), nrow = 1) #dev.off() gc_summarized %&gt;% filter(mdy(Collection.Date)&gt;mdy(&quot;08/15/22&quot;), Collection.Date!=&quot;9/19/2022&quot;) %&gt;% arrange(Location, desc(CH4_avg_umol)) %&gt;% select(Site, Collection.Date, Location, CH4_avg_umol, CH4_sd, CO2_avg_umol, CO2_sd) ## # A tibble: 20 × 7 ## # Groups: Site, Collection.Date [5] ## Site Collection.Date Location CH4_avg_umol CH4_sd CO2_avg_umol CO2_sd ## &lt;chr&gt; &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Pick 9/13/2022 top 98.7 3.09 560. 8.69 ## 2 Deans 8/31/2022 top 0.980 1.32 62.3 7.88 ## 3 Sister3 8/23/2022 top 0.849 0.0111 40.3 4.55 ## 4 Catfish 9/6/2022 top 0.586 0.00180 138. 5.69 ## 5 Deans 8/16/2022 top 0.583 0.0476 107. 3.11 ## 6 Pick 9/13/2022 bottom 126. 60.7 635. 161. ## 7 Sister3 8/23/2022 bottom 2.89 0.985 70.0 15.2 ## 8 Deans 8/16/2022 bottom 0.883 0.0543 88.9 16.4 ## 9 Catfish 9/6/2022 bottom 0.557 0.0686 164. 49.1 ## 10 Deans 8/31/2022 bottom 0.290 0.0597 36.6 6.79 ## 11 Deans 8/31/2022 inlet 16.9 4.77 377. 99.1 ## 12 Pick 9/13/2022 inlet 9.98 1.34 168. 9.29 ## 13 Deans 8/16/2022 inlet 9.95 2.86 234. 46.0 ## 14 Catfish 9/6/2022 inlet 0.598 0.197 141. 6.10 ## 15 Sister3 8/23/2022 inlet 0.0229 0.0000664 75.2 7.54 ## 16 Deans 8/31/2022 outlet 4.31 0.936 153. 44.1 ## 17 Sister3 8/23/2022 outlet 2.62 0.0720 81.8 8.42 ## 18 Catfish 9/6/2022 outlet 1.47 0.410 142. 9.15 ## 19 Pick 9/13/2022 outlet 0.365 0.170 160. 25.6 ## 20 Deans 8/16/2022 outlet 0.311 0.106 50.2 5.51 all_fluxes_pathways %&gt;% select(site, date, pathway, gas, flux_mean_g_m2_day) %&gt;% mutate(flux_round = round(flux_mean_g_m2_day, digits = 4)) %&gt;% select(-flux_mean_g_m2_day) %&gt;% pivot_wider(names_from = c(pathway, gas), values_from = &quot;flux_round&quot;) %&gt;% select(site, date, diffusion_CO2, diffusion_CH4, ebullition_CH4) ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 3.14 0.0117 0.122 ## 2 Catfish 09/18/22 2.42 0.0112 0.0379 ## 3 Deans 08/16/22 3.22 0.0121 0.0232 ## 4 Deans 08/30/22 1.19 0.0064 0.038 ## 5 Pick 09/13/22 3.62 0.295 0.229 ## 6 Sister3 08/22/22 -0.0744 0.0114 0.0692 all_fluxes_pathways %&gt;% select(site, date, pathway, gas, flux_2.5_g_m2_day) %&gt;% mutate(flux_round = round(flux_2.5_g_m2_day, digits = 4)) %&gt;% select(-flux_2.5_g_m2_day) %&gt;% pivot_wider(names_from = c(pathway, gas), values_from = &quot;flux_round&quot;) %&gt;% select(site, date, diffusion_CO2, diffusion_CH4, ebullition_CH4) ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 2.73 0.0075 0.0682 ## 2 Catfish 09/18/22 2.08 0.0068 0.021 ## 3 Deans 08/16/22 2.76 0.009 0.0065 ## 4 Deans 08/30/22 1.02 0.0052 0.0189 ## 5 Pick 09/13/22 2.94 0.248 0.154 ## 6 Sister3 08/22/22 -0.126 0.0098 0.0498 all_fluxes_pathways %&gt;% select(site, date, pathway, gas, flux_97.5_g_m2_day) %&gt;% mutate(flux_round = round(flux_97.5_g_m2_day, digits = 4)) %&gt;% select(-flux_97.5_g_m2_day) %&gt;% pivot_wider(names_from = c(pathway, gas), values_from = &quot;flux_round&quot;) %&gt;% select(site, date, diffusion_CO2, diffusion_CH4, ebullition_CH4) ## # A tibble: 6 × 5 ## site date diffusion_CO2 diffusion_CH4 ebullition_CH4 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 3.63 0.0164 0.204 ## 2 Catfish 09/18/22 2.83 0.0173 0.0657 ## 3 Deans 08/16/22 3.75 0.0151 0.0484 ## 4 Deans 08/30/22 1.37 0.0077 0.0616 ## 5 Pick 09/13/22 4.33 0.348 0.324 ## 6 Sister3 08/22/22 -0.0221 0.0133 0.0915 all_fluxes_pathways %&gt;% mutate(flux_mean_g_m2_day_co2_eq = flux_mean_g_day_co2_eq/area, flux_2.5_g_m2_day_co2_eq= flux_2.5_g_day_co2_eq/area, flux_97.5_g_m2_day_co2_eq= flux_97.5_g_day_co2_eq/area)%&gt;% select(site, date, pathway, gas, flux_mean_g_m2_day_co2_eq) %&gt;% pivot_wider(id_cols = c(&quot;site&quot;, &quot;date&quot;), names_from = c(&quot;pathway&quot;, &quot;gas&quot;), values_from = &quot;flux_mean_g_m2_day_co2_eq&quot;) %&gt;% mutate(total = diffusion_CH4 + diffusion_CO2 + ebullition_CH4, prop_co2 = (diffusion_CO2/total)*100, prop_ch4_diff = (diffusion_CH4/total)*100, prop_ch4_eb = (ebullition_CH4/total)*100) ## # A tibble: 6 × 9 ## site date diffusion_CH4 diffusion_CO2 ebullition_CH4 total prop_co2 prop_ch4_diff prop_ch4_eb ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Catfish 09/06/22 0.316 3.14 3.30 6.75 46.4 4.67 48.9 ## 2 Catfish 09/18/22 0.303 2.42 1.02 3.75 64.7 8.08 27.3 ## 3 Deans 08/16/22 0.326 3.22 0.627 4.17 77.2 7.81 15.0 ## 4 Deans 08/30/22 0.172 1.19 1.03 2.39 49.8 7.20 43.0 ## 5 Pick 09/13/22 7.96 3.62 6.19 17.8 20.4 44.8 34.8 ## 6 Sister3 08/22/22 0.309 -0.0744 1.87 2.10 -3.54 14.7 88.9 do %&gt;% filter(location == &quot;Top&quot;) %&gt;% mutate(site = if_else(site == &quot;Pick&quot;, &quot;Blue Herron&quot;, site)) %&gt;% filter(is.na(sampling)==F) %&gt;% group_by(site) %&gt;% summarize(min_do = min(DO_mgL), max_do = max(DO_mgL), mean_do = mean(DO_mgL)) ## # A tibble: 4 × 4 ## site min_do max_do mean_do ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Blue Herron 0.043 0.141 0.0495 ## 2 Catfish 0.359 7.64 5.54 ## 3 Deans 4.91 7.93 6.32 ## 4 Sister 7.19 9.26 8.40 # ch4_ws &lt;- lmer(flux_ch4_g_hr ~ ws_mean + (1|sampling), data = diffusion_ws) # summary(ch4_ws) # # ch4_ws_b &lt;- lm(flux_ch4_g_hr ~ ws_mean, data = diffusion_ws %&gt;% filter(site == &quot;Picks&quot;)) # summary(ch4_ws_b) # # # co2_ws &lt;- lmer(flux_co2_g_hr ~ ws_mean + (1|sampling), data = diffusion_ws) # summary(co2_ws) # # co2_ws_b &lt;- lm(flux_co2_g_hr ~ ws_mean, data = diffusion_ws %&gt;% filter(site == &quot;Picks&quot;)) # summary(co2_ws_b) # # co2_ws_c &lt;- lmer(flux_co2_g_hr ~ ws_mean + (1|sampling), data = diffusion_ws %&gt;% filter(site != &quot;Picks&quot;)) # summary(co2_ws_c) # r2_nakagawa(co2_ws_c) mod7 &lt;- glmer(ch4_eb_g_m2_hr_24 ~ Depth + inlet_dist + (1|Sampling) , data = ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0), family = Gamma(link = &quot;log&quot;)) summary(mod7) ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ Depth + inlet_dist + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1361.9 -1347.1 686.0 -1371.9 137 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.6933 -0.4869 -0.3106 0.0965 8.5753 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.293 1.137 ## Residual 1.989 1.410 ## Number of obs: 142, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.437752 0.374383 -14.525 &lt;2e-16 *** ## Depth -0.298416 0.124667 -2.394 0.0167 * ## inlet_dist -0.001263 0.003096 -0.408 0.6832 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) Depth ## Depth -0.126 ## inlet_dist -0.231 -0.635 r2_nakagawa(mod7) ## # R2 for Mixed Models ## ## Conditional R2: 0.411 ## Marginal R2: 0.028 mod7.a &lt;- glmer(ch4_eb_g_m2_hr_24 ~ inlet_dist + (1|Sampling) , data = ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0), family = Gamma(link = &quot;log&quot;)) summary(mod7.a) ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ inlet_dist + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1365.1 -1353.2 686.5 -1373.1 139 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.7281 -0.5353 -0.3365 0.1224 7.4056 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.525 1.235 ## Residual 1.791 1.338 ## Number of obs: 143, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.558643 0.412348 -13.480 &lt;2e-16 *** ## inlet_dist -0.005532 0.002316 -2.388 0.0169 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## inlet_dist -0.352 r2_nakagawa(mod7.a) ## # R2 for Mixed Models ## ## Conditional R2: 0.475 ## Marginal R2: 0.028 mod7.b &lt;- glmer(ch4_eb_g_m2_hr_24 ~ Depth + (1|Sampling) , data = ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0), family = Gamma(link = &quot;log&quot;)) summary(mod7.b) ## Generalized linear mixed model fit by maximum likelihood (Laplace Approximation) [&#39;glmerMod&#39;] ## Family: Gamma ( log ) ## Formula: ch4_eb_g_m2_hr_24 ~ Depth + (1 | Sampling) ## Data: ebullition_24 %&gt;% filter(ch4_eb_g_m2_hr_24 &gt; 0) ## ## AIC BIC logLik deviance df.resid ## -1363.8 -1351.9 685.9 -1371.8 138 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -0.7000 -0.4970 -0.2949 0.0948 8.4736 ## ## Random effects: ## Groups Name Variance Std.Dev. ## Sampling (Intercept) 1.101 1.049 ## Residual 1.954 1.398 ## Number of obs: 142, groups: Sampling, 6 ## ## Fixed effects: ## Estimate Std. Error t value Pr(&gt;|z|) ## (Intercept) -5.47156 0.05698 -96.031 &lt; 2e-16 *** ## Depth -0.33127 0.04623 -7.166 7.74e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## Depth -0.036 r2_nakagawa(mod7.b) ## # R2 for Mixed Models ## ## Conditional R2: 0.380 ## Marginal R2: 0.030 cor(ebullition_24 %&gt;% select(Depth, inlet_dist, ch4_eb_g_m2_hr_24) %&gt;% st_drop_geometry(), use = &quot;complete.obs&quot;) ## Depth inlet_dist ch4_eb_g_m2_hr_24 ## Depth 1.00000000 0.3384937 -0.07818617 ## inlet_dist 0.33849373 1.0000000 0.22664523 ## ch4_eb_g_m2_hr_24 -0.07818617 0.2266452 1.00000000 cor(ebullition_24 %&gt;% select(Depth, inlet_dist, ch4_eb_g_m2_hr_24) %&gt;% st_drop_geometry(), use = &quot;complete.obs&quot;, method = &quot;spearman&quot;) ## Depth inlet_dist ch4_eb_g_m2_hr_24 ## Depth 1.0000000 0.3805896 -0.3615451 ## inlet_dist 0.3805896 1.0000000 -0.1231408 ## ch4_eb_g_m2_hr_24 -0.3615451 -0.1231408 1.0000000 cand.models &lt;- list(&quot;mod7&quot;= mod7, &quot;mod7.a&quot;= mod7.a, &quot;mod7.b&quot;= mod7.b) suncloud.mod.ch4 &lt;- lm(flux_ch4_g_hr ~ time.num + wolffia + sampling, data = suncloud) summary(suncloud.mod.ch4) ## ## Call: ## lm(formula = flux_ch4_g_hr ~ time.num + wolffia + sampling, data = suncloud) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.263193 -0.003096 0.000610 0.003832 0.170841 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.252e-02 5.722e-03 -2.188 0.0298 * ## time.num 7.832e-08 6.972e-08 1.123 0.2626 ## wolffiayes 9.684e-03 4.411e-03 2.195 0.0293 * ## samplingSunny\\n6/20 - 6/21 5.120e-03 3.743e-03 1.368 0.1729 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.0229 on 202 degrees of freedom ## Multiple R-squared: 0.03131, Adjusted R-squared: 0.01692 ## F-statistic: 2.176 on 3 and 202 DF, p-value: 0.09199 suncloud.mod.co2 &lt;- lm(flux_co2_g_hr ~ time.num + time.num.sq + wolffia + sampling, data = suncloud) summary(suncloud.mod.co2) ## ## Call: ## lm(formula = flux_co2_g_hr ~ time.num + time.num.sq + wolffia + ## sampling, data = suncloud) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.64703 -0.12636 0.03493 0.14631 1.00110 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.266e-01 8.087e-02 7.748 4.52e-13 *** ## time.num -2.726e-05 3.057e-06 -8.917 2.96e-16 *** ## time.num.sq 2.958e-10 3.502e-11 8.446 6.00e-15 *** ## wolffiayes -2.161e-01 4.868e-02 -4.439 1.49e-05 *** ## samplingSunny\\n6/20 - 6/21 7.863e-02 4.119e-02 1.909 0.0577 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2504 on 201 degrees of freedom ## Multiple R-squared: 0.3732, Adjusted R-squared: 0.3607 ## F-statistic: 29.92 on 4 and 201 DF, p-value: &lt; 2.2e-16 "]]
